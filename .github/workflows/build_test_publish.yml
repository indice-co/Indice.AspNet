name: "Build, Test and Publish to Nuget"

on:
  push:
    branches:
      - feature/pipelines

jobs:
  BuildTestAndPublish:
    runs-on: windows-latest
    steps:

      # Checkout repo
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup .NET 8
      - name: Setup dotnet 8.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
          source-url: https://api.nuget.org/v3/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.NUGET_AUTH_TOKEN}}
   
      # Setup Node.js
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20  

      # You can test your matrix by printing the current dotnet version
      - name: Display dotnet version
        run: dotnet --version

      # Create .nuget directory
      - name: Create .nuget directory
        shell: pwsh
        run: |
          if (!(Test-Path -Path ".\.nuget" ))
          {
            New-Item -ItemType "directory" -Path ".\.nuget"
          }
          if (!(Test-Path -Path ".\.nuget\packages" ))
          {
            New-Item -ItemType "directory" -Path ".\.nuget\packages"
          }

      # Npm Install and build Identity UI
      - name: NPM Install and Build Identity UI
        run: |
          cd src/Indice.Features.Identity.UI
          npm install --force
          npm run gulp -- copy:libs
          npm run gulp -- sass
    
      # Npm Install Cases
      - name: NPM Install Cases
        run: |
          cd src/Indice.Features.Cases.App
          npm install

      # Npm Install AdminUI
      - name: NPM Install AdminUI
        run: |
          cd src/Indice.Features.Identity.AdminUI.App
          npm install

      # Npm Install Messages
      - name: NPM Install Messages
        run: |
          cd src/Indice.Features.Messages.App
          npm install

      # Npm Install Risk App
      - name: NPM Install Risk
        run: |
          cd src/Indice.Features.Risk.App
          npm install
      
      # Dotnet restore + build
      - name: Install dependencies
        run: dotnet restore /nowarn:netsdk1138
      - name: Clean
        run: dotnet clean
      - name: Build
        run: dotnet build --no-restore --configuration Release
        
      # Dotnet test 
      - name: Test with dotnet
        id: dotnet_test_task
        run: dotnet test --no-build --configuration Release --logger trx --results-directory "TestResults"

       # Test reporting
      - name: Test Reporter
        uses: dorny/test-reporter@v1.9.1
        if: always()
        with:
          name: DotNET Tests
          path: "TestResults/*.trx"                            
          reporter: dotnet-trx
          fail-on-error: true

      # Dotnet pack
      - name: Generate nuget packages
        if: steps.dotnet_test_task.outcome == 'success'
        run: ./pack.ps1

      


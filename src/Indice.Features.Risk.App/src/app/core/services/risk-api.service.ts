//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const RISK_API_BASE_URL = new InjectionToken<string>('RISK_API_BASE_URL');

export interface IRiskApiService {
    /**
     * Calculates the risk given a transaction presented in the system.
     * @return OK
     */
    getRisk(body: RiskModel): Observable<AggregateRuleExecutionResult>;
    /**
     * Fetch risk events.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getRiskEvents(filter: string[], page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<RiskEventResultSet>;
    /**
     * Fetch risk results.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getRiskResults(filter: string[], page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<DbAggregateRuleExecutionResultResultSet>;
    /**
     * Records a risk event in the store.
     * @return Created
     */
    createRiskEvent(body: RiskModel): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class RiskApiService implements IRiskApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(RISK_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Calculates the risk given a transaction presented in the system.
     * @return OK
     */
    getRisk(body: RiskModel): Observable<AggregateRuleExecutionResult> {
        let url_ = this.baseUrl + "/api/risk";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRisk(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRisk(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AggregateRuleExecutionResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AggregateRuleExecutionResult>;
        }));
    }

    protected processGetRisk(response: HttpResponseBase): Observable<AggregateRuleExecutionResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AggregateRuleExecutionResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AggregateRuleExecutionResult>(null as any);
    }

    /**
     * Fetch risk events.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getRiskEvents(filter: string[], page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<RiskEventResultSet> {
        let url_ = this.baseUrl + "/api/risk-events?";
        if (filter === undefined || filter === null)
            throw new Error("The parameter 'filter' must be defined and cannot be null.");
        else
            filter && filter.forEach(item => { url_ += "Filter=" + encodeURIComponent("" + item) + "&"; });
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRiskEvents(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRiskEvents(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RiskEventResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RiskEventResultSet>;
        }));
    }

    protected processGetRiskEvents(response: HttpResponseBase): Observable<RiskEventResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RiskEventResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RiskEventResultSet>(null as any);
    }

    /**
     * Fetch risk results.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getRiskResults(filter: string[], page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<DbAggregateRuleExecutionResultResultSet> {
        let url_ = this.baseUrl + "/api/risk-results?";
        if (filter === undefined || filter === null)
            throw new Error("The parameter 'filter' must be defined and cannot be null.");
        else
            filter && filter.forEach(item => { url_ += "Filter=" + encodeURIComponent("" + item) + "&"; });
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRiskResults(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRiskResults(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DbAggregateRuleExecutionResultResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DbAggregateRuleExecutionResultResultSet>;
        }));
    }

    protected processGetRiskResults(response: HttpResponseBase): Observable<DbAggregateRuleExecutionResultResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DbAggregateRuleExecutionResultResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DbAggregateRuleExecutionResultResultSet>(null as any);
    }

    /**
     * Records a risk event in the store.
     * @return Created
     */
    createRiskEvent(body: RiskModel): Observable<void> {
        let url_ = this.baseUrl + "/api/risk/events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRiskEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRiskEvent(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCreateRiskEvent(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }
}

export class AggregateRuleExecutionResult implements IAggregateRuleExecutionResult {
    readonly id?: string;
    readonly numberOfRulesExecuted?: number;
    readonly results?: RuleExecutionResult[] | undefined;

    constructor(data?: IAggregateRuleExecutionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).id = _data["id"];
            (<any>this).numberOfRulesExecuted = _data["numberOfRulesExecuted"];
            if (Array.isArray(_data["results"])) {
                (<any>this).results = [] as any;
                for (let item of _data["results"])
                    (<any>this).results!.push(RuleExecutionResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AggregateRuleExecutionResult {
        data = typeof data === 'object' ? data : {};
        let result = new AggregateRuleExecutionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["numberOfRulesExecuted"] = this.numberOfRulesExecuted;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAggregateRuleExecutionResult {
    id?: string;
    numberOfRulesExecuted?: number;
    results?: RuleExecutionResult[] | undefined;
}

export class DbAggregateRuleExecutionResult implements IDbAggregateRuleExecutionResult {
    id?: string;
    eventId?: string | undefined;
    createdAt?: Date;
    amount?: number | undefined;
    ipAddress?: string | undefined;
    subjectId?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    data?: any | undefined;
    numberOfRulesExecuted?: number;
    results?: DbRuleExecutionResult[] | undefined;

    constructor(data?: IDbAggregateRuleExecutionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.eventId = _data["eventId"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.amount = _data["amount"];
            this.ipAddress = _data["ipAddress"];
            this.subjectId = _data["subjectId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.data = _data["data"];
            this.numberOfRulesExecuted = _data["numberOfRulesExecuted"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(DbRuleExecutionResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DbAggregateRuleExecutionResult {
        data = typeof data === 'object' ? data : {};
        let result = new DbAggregateRuleExecutionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["eventId"] = this.eventId;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        data["ipAddress"] = this.ipAddress;
        data["subjectId"] = this.subjectId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["data"] = this.data;
        data["numberOfRulesExecuted"] = this.numberOfRulesExecuted;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDbAggregateRuleExecutionResult {
    id?: string;
    eventId?: string | undefined;
    createdAt?: Date;
    amount?: number | undefined;
    ipAddress?: string | undefined;
    subjectId?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    data?: any | undefined;
    numberOfRulesExecuted?: number;
    results?: DbRuleExecutionResult[] | undefined;
}

export class DbAggregateRuleExecutionResultResultSet implements IDbAggregateRuleExecutionResultResultSet {
    count?: number;
    items?: DbAggregateRuleExecutionResult[] | undefined;

    constructor(data?: IDbAggregateRuleExecutionResultResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DbAggregateRuleExecutionResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DbAggregateRuleExecutionResultResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new DbAggregateRuleExecutionResultResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDbAggregateRuleExecutionResultResultSet {
    count?: number;
    items?: DbAggregateRuleExecutionResult[] | undefined;
}

export class DbRuleExecutionResult implements IDbRuleExecutionResult {
    riskLevel?: RiskLevel;
    riskScore?: number | undefined;
    reason?: string | undefined;
    ruleName?: string | undefined;

    constructor(data?: IDbRuleExecutionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.riskLevel = _data["riskLevel"];
            this.riskScore = _data["riskScore"];
            this.reason = _data["reason"];
            this.ruleName = _data["ruleName"];
        }
    }

    static fromJS(data: any): DbRuleExecutionResult {
        data = typeof data === 'object' ? data : {};
        let result = new DbRuleExecutionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["riskLevel"] = this.riskLevel;
        data["riskScore"] = this.riskScore;
        data["reason"] = this.reason;
        data["ruleName"] = this.ruleName;
        return data;
    }
}

export interface IDbRuleExecutionResult {
    riskLevel?: RiskLevel;
    riskScore?: number | undefined;
    reason?: string | undefined;
    ruleName?: string | undefined;
}

export class HttpValidationProblemDetails implements IHttpValidationProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    readonly errors?: { [key: string]: string[]; } | undefined;

    [key: string]: any;

    constructor(data?: IHttpValidationProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["errors"]) {
                (<any>this).errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>(<any>this).errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): HttpValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new HttpValidationProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = (<any>this.errors)[key];
            }
        }
        return data;
    }
}

export interface IHttpValidationProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    errors?: { [key: string]: string[]; } | undefined;

    [key: string]: any;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class RiskEvent implements IRiskEvent {
    readonly id?: string;
    amount?: number | undefined;
    ipAddress?: string | undefined;
    subjectId?: string | undefined;
    createdAt?: Date;
    name?: string | undefined;
    type?: string | undefined;
    data?: any | undefined;
    sourceId?: string | undefined;
    sourceTransId?: string | undefined;

    constructor(data?: IRiskEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).id = _data["id"];
            this.amount = _data["amount"];
            this.ipAddress = _data["ipAddress"];
            this.subjectId = _data["subjectId"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.type = _data["type"];
            this.data = _data["data"];
            this.sourceId = _data["sourceId"];
            this.sourceTransId = _data["sourceTransId"];
        }
    }

    static fromJS(data: any): RiskEvent {
        data = typeof data === 'object' ? data : {};
        let result = new RiskEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["amount"] = this.amount;
        data["ipAddress"] = this.ipAddress;
        data["subjectId"] = this.subjectId;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["type"] = this.type;
        data["data"] = this.data;
        data["sourceId"] = this.sourceId;
        data["sourceTransId"] = this.sourceTransId;
        return data;
    }
}

export interface IRiskEvent {
    id?: string;
    amount?: number | undefined;
    ipAddress?: string | undefined;
    subjectId?: string | undefined;
    createdAt?: Date;
    name?: string | undefined;
    type?: string | undefined;
    data?: any | undefined;
    sourceId?: string | undefined;
    sourceTransId?: string | undefined;
}

export class RiskEventResultSet implements IRiskEventResultSet {
    count?: number;
    items?: RiskEvent[] | undefined;

    constructor(data?: IRiskEventResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RiskEvent.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RiskEventResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new RiskEventResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRiskEventResultSet {
    count?: number;
    items?: RiskEvent[] | undefined;
}

export enum RiskLevel {
    None = "None",
    Low = "Low",
    Medium = "Medium",
    High = "High",
}

export class RiskModel implements IRiskModel {
    amount?: number | undefined;
    ipAddress?: string | undefined;
    subjectId?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    data?: any | undefined;
    sourceId?: string | undefined;
    sourceTransId?: string | undefined;
    resultId?: string | undefined;

    constructor(data?: IRiskModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.ipAddress = _data["ipAddress"];
            this.subjectId = _data["subjectId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.data = _data["data"];
            this.sourceId = _data["sourceId"];
            this.sourceTransId = _data["sourceTransId"];
            this.resultId = _data["resultId"];
        }
    }

    static fromJS(data: any): RiskModel {
        data = typeof data === 'object' ? data : {};
        let result = new RiskModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["ipAddress"] = this.ipAddress;
        data["subjectId"] = this.subjectId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["data"] = this.data;
        data["sourceId"] = this.sourceId;
        data["sourceTransId"] = this.sourceTransId;
        data["resultId"] = this.resultId;
        return data;
    }
}

export interface IRiskModel {
    amount?: number | undefined;
    ipAddress?: string | undefined;
    subjectId?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    data?: any | undefined;
    sourceId?: string | undefined;
    sourceTransId?: string | undefined;
    resultId?: string | undefined;
}

export class RuleExecutionResult implements IRuleExecutionResult {
    riskLevel?: RiskLevel;
    readonly riskScore?: number | undefined;
    readonly reason?: string | undefined;
    readonly ruleName?: string | undefined;

    constructor(data?: IRuleExecutionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.riskLevel = _data["riskLevel"];
            (<any>this).riskScore = _data["riskScore"];
            (<any>this).reason = _data["reason"];
            (<any>this).ruleName = _data["ruleName"];
        }
    }

    static fromJS(data: any): RuleExecutionResult {
        data = typeof data === 'object' ? data : {};
        let result = new RuleExecutionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["riskLevel"] = this.riskLevel;
        data["riskScore"] = this.riskScore;
        data["reason"] = this.reason;
        data["ruleName"] = this.ruleName;
        return data;
    }
}

export interface IRuleExecutionResult {
    riskLevel?: RiskLevel;
    riskScore?: number | undefined;
    reason?: string | undefined;
    ruleName?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
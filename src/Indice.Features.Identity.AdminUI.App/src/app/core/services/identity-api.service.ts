//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const IDENTITY_API_BASE_URL = new InjectionToken<string>('IDENTITY_API_BASE_URL');

export interface IIdentityApiService {
    /**
     * Generates a password reset token and sends it to the user via email.
     * @param body (optional) 
     * @return No Content
     */
    forgotPassword(body?: ForgotPasswordRequest | undefined): Observable<void>;
    /**
     * Changes the password of the user confirming the code received during forgot password process.
     * @param body (optional) 
     * @return No Content
     */
    forgotPasswordConfirmation(body?: ForgotPasswordConfirmationRequest | undefined): Observable<void>;
    /**
     * Gets the password options that are applied when the user creates an account.
     * @return OK
     */
    getPasswordOptions(): Observable<PasswordOptions>;
    /**
     * Self-service user registration endpoint.
     * @param body (optional) 
     * @return No Content
     */
    register(body?: RegisterRequest | undefined): Observable<void>;
    /**
     * Checks if a username already exists in the database.
     * @param body (optional) 
     * @return No Content
     */
    checkUserNameExists(body?: ValidateUserNameRequest | undefined): Observable<void>;
    /**
     * Validates a user's password against one or more configured IPasswordValidator.
     * @param body (optional) 
     * @return OK
     */
    validatePassword(body?: ValidatePasswordRequest | undefined): Observable<CredentialsValidationInfo>;
    /**
     * Returns a list of AppSettingInfo objects containing the total number of application settings in the database and the data filtered according to the provided AppSettingInfo.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getSettings(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<AppSettingInfoResultSet>;
    /**
     * Creates a new application setting.
     * @param body (optional) 
     * @return Created
     */
    createSetting(body?: CreateAppSettingRequest | undefined): Observable<AppSettingInfo>;
    /**
     * Gets an application setting by it's key.
     * @param key (optional) 
     * @param body (optional) 
     * @return OK
     */
    getSettingByKey(key?: string | undefined, body?: any | undefined): Observable<AppSettingInfo>;
    /**
     * Updates an existing application setting.
     * @param key (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateSetting(key?: string | undefined, body?: UpdateAppSettingRequest | undefined): Observable<AppSettingInfo>;
    /**
     * Permanently deletes an application setting.
     * @param key (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteSetting(key?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Loads the appsettings.json file and saves the configuration in the database.
     * @param hardRefresh (optional) 
     * @param body (optional) 
     * @return No Content
     */
    loadFromAppSettingsJson(hardRefresh?: boolean | undefined, body?: any | undefined): Observable<void>;
    /**
     * Returns a list of ClaimTypeInfo objects containing the total number of claim types in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param required (optional) 
     * @param body (optional) 
     * @return OK
     */
    getClaimTypes(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, required?: boolean | undefined, body?: any | undefined): Observable<ClaimTypeInfoResultSet>;
    /**
     * Creates a new claim type.
     * @param body (optional) 
     * @return Created
     */
    createClaimType(body?: CreateClaimTypeRequest | undefined): Observable<ClaimTypeInfo>;
    /**
     * Gets a claim type by it's unique id.
     * @param claimTypeId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getClaimType(claimTypeId?: string | undefined, body?: any | undefined): Observable<ClaimTypeInfo>;
    /**
     * Updates an existing claim type.
     * @param claimTypeId (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateClaimType(claimTypeId?: string | undefined, body?: UpdateClaimTypeRequest | undefined): Observable<ClaimTypeInfo>;
    /**
     * Permanently deletes an existing claim type.
     * @param claimTypeId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClaimType(claimTypeId?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Returns a list of ClientInfo objects containing the total number of claim types in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getClients(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<ClientInfoResultSet>;
    /**
     * Creates a new client.
     * @param body (optional) 
     * @return Created
     */
    createClient(body?: CreateClientRequest | undefined): Observable<ClientInfo>;
    /**
     * Gets a client by it's unique id.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getClient(clientId?: string | undefined, body?: any | undefined): Observable<SingleClientInfo>;
    /**
     * Updates an existing client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    updateClient(clientId?: string | undefined, body?: UpdateClientRequest | undefined): Observable<void>;
    /**
     * Permanently deletes an existing client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClient(clientId?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Adds a new secret, from a certificate, to an existing client.
     * @param clientId (optional) 
     * @return OK
     */
    uploadCertificate(body: Blob, clientId?: string | undefined): Observable<SecretInfo>;
    /**
     * Downloads a client secret if it is a certificate.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getCertificate(secretId: number, clientId?: string | undefined, body?: any | undefined): Observable<FileResponse>;
    /**
     * Adds a claim for the specified client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    addClientClaim(clientId?: string | undefined, body?: CreateClaimRequest | undefined): Observable<ClaimInfo>;
    /**
     * Removes an identity resource from the specified client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClientClaim(claimId: number, clientId?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Adds a grant type to the specified client.
     * @param clientId (optional) 
     * @param grantType (optional) 
     * @param body (optional) 
     * @return OK
     */
    addClientGrantType(clientId?: string | undefined, grantType?: string | undefined, body?: any | undefined): Observable<GrantTypeInfo>;
    /**
     * Removes a grant type from the specified client.
     * @param clientId (optional) 
     * @param grantType (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClientGrantType(clientId?: string | undefined, grantType?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Adds an identity resource to the specified client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    addClientResources(clientId?: string | undefined, body?: string[] | undefined): Observable<void>;
    /**
     * Removes a range of identity resources from the specified client.
     * @param clientId (optional) 
     * @param resources (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClientResource(clientId?: string | undefined, resources?: string[] | undefined, body?: any | undefined): Observable<void>;
    /**
     * Adds a new secret to an existing client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    addClientSecret(clientId?: string | undefined, body?: CreateSecretRequest | undefined): Observable<SecretInfo>;
    /**
     * Removes a specified secret from a client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClientSecret(secretId: number, clientId?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Gets the UI configuration for the specified client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getClientTheme(clientId?: string | undefined, body?: any | undefined): Observable<ClientThemeConfigResponse>;
    /**
     * Creates or updates the ui configuration for the specified client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    createOrUpdateClientTheme(clientId?: string | undefined, body?: ClientThemeConfigRequest | undefined): Observable<void>;
    /**
     * Renews the list of client urls (redirect cors etc).
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    updateClientUrls(clientId?: string | undefined, body?: UpdateClientUrls | undefined): Observable<void>;
    /**
     * Gets the metadata of a certificate for display.
     * @return OK
     */
    getCertificateMetadata(body: Blob): Observable<SecretInfoBase>;
    /**
     * Displays blog posts from the official IdentityServer blog.
     * @param page (optional) 
     * @param size (optional) 
     * @return OK
     */
    getNews(page?: number | undefined, size?: number | undefined): Observable<BlogItemInfoResultSet>;
    /**
     * Gets some useful information as a summary of the system.
     * @param body (optional) 
     * @return OK
     */
    getSystemSummary(body?: any | undefined): Observable<SummaryInfo>;
    /**
     * Gets the UI features status.
     * @return OK
     */
    getUiFeatures(): Observable<UiFeaturesInfo>;
    /**
     * Gets the list of available external providers.
     * @param body (optional) 
     * @return OK
     */
    getExternalProviders(body?: any | undefined): Observable<ExternalProviderResultSet>;
    /**
     * Permanently deletes current user's account.
     * @param body (optional) 
     * @return No Content
     */
    deleteAccount(body?: any | undefined): Observable<void>;
    /**
     * Gets the claims of the user.
     * @param body (optional) 
     * @return OK
     */
    getClaims(body?: any | undefined): Observable<ClaimInfoResultSet>;
    /**
     * Adds the requested claims on the current user's account.
     * @param body (optional) 
     * @return OK
     */
    addClaims(body?: any | undefined): Observable<ClaimInfoResultSet>;
    /**
     * Upserts the requested claims on the current user's account.
     * @param body (optional) 
     * @return OK
     */
    patchClaims(body?: any | undefined): Observable<ClaimInfoResultSet>;
    /**
     * Updates the specified claim for the current user.
     * @param body (optional) 
     * @return OK
     */
    updateClaim(claimId: number, body?: UpdateUserClaimRequest | undefined): Observable<ClaimInfo>;
    /**
     * Updates the email of the current user.
     * @param body (optional) 
     * @return No Content
     */
    updateEmail(body?: UpdateUserEmailRequest | undefined): Observable<void>;
    /**
     * Confirms the email address of a given user.
     * @param body (optional) 
     * @return No Content
     */
    confirmEmail(body?: ConfirmEmailRequest | undefined): Observable<void>;
    /**
     * Gets the consents given by the user.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param consentType (optional) 
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getConsents(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, consentType?: string | undefined, clientId?: string | undefined, body?: any | undefined): Observable<UserConsentInfoResultSet>;
    /**
     * Updates the max devices count.
     * @param body (optional) 
     * @return No Content
     */
    updateMaxDevicesCount(body?: UpdateMaxDevicesCountRequest | undefined): Observable<void>;
    /**
     * Changes the password for the current user, but requires the old password to be present.
     * @param body (optional) 
     * @return No Content
     */
    updatePassword(body?: ChangePasswordRequest | undefined): Observable<void>;
    /**
     * Updates the password expiration policy.
     * @param body (optional) 
     * @return No Content
     */
    updatePasswordExpirationPolicy(body?: UpdatePasswordExpirationPolicyRequest | undefined): Observable<void>;
    /**
     * Requests a phone number change for the current user.
     * @param body (optional) 
     * @return No Content
     */
    updatePhoneNumber(body?: UpdateUserPhoneNumberRequest | undefined): Observable<void>;
    /**
     * Confirms the phone number of the user, using the OTP token.
     * @param body (optional) 
     * @return No Content
     */
    confirmPhoneNumber(body?: ConfirmPhoneNumberRequest | undefined): Observable<void>;
    /**
     * Changes the username for the current user.
     * @param body (optional) 
     * @return No Content
     */
    updateUserName(body?: UpdateUserNameRequest | undefined): Observable<void>;
    /**
     * Returns a list of IdentityResourceInfo objects containing the total number of identity resources in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getIdentityResources(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<IdentityResourceInfoResultSet>;
    /**
     * Gets an identity resource by it's unique id.
     * @param body (optional) 
     * @return OK
     */
    getIdentityResource(resourceId: number, body?: any | undefined): Observable<IdentityResourceInfo>;
    /**
     * Creates a new identity resource.
     * @param body (optional) 
     * @return Created
     */
    createIdentityResource(body?: CreateResourceRequest | undefined): Observable<IdentityResourceInfo>;
    /**
     * Updates an identity resource.
     * @param body (optional) 
     * @return No Content
     */
    updateIdentityResource(resourceId: number, body?: UpdateIdentityResourceRequest | undefined): Observable<void>;
    /**
     * Permanently deletes an identity resource.
     * @param body (optional) 
     * @return No Content
     */
    deleteIdentityResource(resourceId: number, body?: any | undefined): Observable<void>;
    /**
     * Adds claims to an identity resource.
     * @param body (optional) 
     * @return No Content
     */
    addIdentityResourceClaims(resourceId: number, body?: string[] | undefined): Observable<void>;
    /**
     * Removes a specified claim from an identity resource.
     * @param claim (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteIdentityResourceClaim(resourceId: number, claim?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Returns a list of ApiResourceInfo objects containing the total number of API resources in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getApiResources(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<ApiResourceInfoResultSet>;
    /**
     * Creates a new API resource.
     * @param body (optional) 
     * @return Created
     */
    createApiResource(body?: CreateResourceRequest | undefined): Observable<ApiResourceInfo>;
    /**
     * Gets an API resource by it's unique id.
     * @param body (optional) 
     * @return OK
     */
    getApiResource(resourceId: number, body?: any | undefined): Observable<ApiResourceInfo>;
    /**
     * Updates an API resource.
     * @param body (optional) 
     * @return No Content
     */
    updateApiResource(resourceId: number, body?: UpdateApiResourceRequest | undefined): Observable<void>;
    /**
     * Permanently deletes an API resource.
     * @param body (optional) 
     * @return No Content
     */
    deleteApiResource(resourceId: number, body?: any | undefined): Observable<void>;
    /**
     * Adds claims to an API resource.
     * @param body (optional) 
     * @return No Content
     */
    addApiResourceClaims(resourceId: number, body?: string[] | undefined): Observable<void>;
    /**
     * Removes a specified claim from an API resource.
     * @param claim (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteApiResourceClaim(resourceId: number, claim?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Adds a new scope to an existing API resource.
     * @param body (optional) 
     * @return OK
     */
    addApiResourceScope(resourceId: number, body?: CreateApiScopeRequest | undefined): Observable<ApiScopeInfo>;
    /**
     * Updates a specified scope of an API resource.
     * @param body (optional) 
     * @return No Content
     */
    updateApiResourceScope(resourceId: number, scopeId: number, body?: UpdateApiScopeRequest | undefined): Observable<void>;
    /**
     * Deletes a specified scope from an API resource.
     * @param body (optional) 
     * @return No Content
     */
    deleteApiResourceScope(resourceId: number, scopeId: number, body?: any | undefined): Observable<void>;
    /**
     * Adds claims to an API scope of a protected resource.
     * @param body (optional) 
     * @return No Content
     */
    addApiResourceScopeClaims(resourceId: number, scopeId: number, body?: string[] | undefined): Observable<void>;
    /**
     * Deletes a claim from an API scope of a protected resource.
     * @param claim (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteApiResourceScopeClaim(resourceId: number, scopeId: number, claim?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Adds a new scope to an existing API resource.
     * @param body (optional) 
     * @return OK
     */
    addApiResourceSecret(resourceId: number, body?: CreateSecretRequest | undefined): Observable<SecretInfo>;
    /**
     * Removes a specified claim from an API resource.
     * @param body (optional) 
     * @return No Content
     */
    deleteApiResourceSecret(resourceId: number, secretId: number, body?: any | undefined): Observable<void>;
    /**
     * Returns a list of ApiResourceInfo objects containing the total number of API resources in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getApiScopes(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<ApiScopeInfoResultSet>;
    /**
     * Returns a list of RoleInfo objects containing the total number of roles in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getRoles(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<RoleInfoResultSet>;
    /**
     * Creates a new role.
     * @param body (optional) 
     * @return Created
     */
    createRole(body?: CreateRoleRequest | undefined): Observable<RoleInfo>;
    /**
     * Gets a role by it's unique id.
     * @param roleId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getRole(roleId?: string | undefined, body?: any | undefined): Observable<RoleInfo>;
    /**
     * Updates an existing role.
     * @param roleId (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateRole(roleId?: string | undefined, body?: UpdateRoleRequest | undefined): Observable<RoleInfo>;
    /**
     * Permanently deletes an existing role.
     * @param roleId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteRole(roleId?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Returns a list of UserInfo objects containing the total number of users in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param claimType (optional) 
     * @param claimValue (optional) 
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUsers(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, claimType?: string | undefined, claimValue?: string | undefined, userId?: string[] | undefined, body?: any | undefined): Observable<UserInfoResultSet>;
    /**
     * Creates a new user.
     * @param body (optional) 
     * @return Created
     */
    createUser(body?: CreateUserRequest | undefined): Observable<SingleUserInfo>;
    /**
     * Gets a user by it's unique id.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUser(userId?: string | undefined, body?: any | undefined): Observable<SingleUserInfo>;
    /**
     * Updates an existing user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateUser(userId?: string | undefined, body?: UpdateUserRequest | undefined): Observable<SingleUserInfo>;
    /**
     * Permanently deletes an existing user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteUser(userId?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Gets a list of the applications the user has given consent to or currently has IdentityServer side tokens for.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUserApplications(userId?: string | undefined, body?: any | undefined): Observable<UserClientInfoResultSet>;
    /**
     * Adds a claim for the specified user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return Created
     */
    addUserClaim(userId?: string | undefined, body?: CreateClaimRequest | undefined): Observable<ClaimInfo>;
    /**
     * Gets a specified claim for a given user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUserClaim(claimId: number, userId?: string | undefined, body?: any | undefined): Observable<BasicClaimInfo>;
    /**
     * Updates an existing user claim.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateUserClaim(claimId: number, userId?: string | undefined, body?: UpdateUserClaimRequest | undefined): Observable<ClaimInfo>;
    /**
     * Permanently deletes a specified claim from a user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteUserClaim(claimId: number, userId?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Gets a list of the devices of the specified user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUserDevices(userId?: string | undefined, body?: any | undefined): Observable<DeviceInfoResultSet>;
    /**
     * Resends the confirmation email for a given user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    resendConfirmationEmail(userId?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Gets a list of the external login providers for the specified user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUserExternalLogins(userId?: string | undefined, body?: any | undefined): Observable<UserLoginProviderInfoResultSet>;
    /**
     * Permanently deletes a specified login provider association from a user.
     * @param userId (optional) 
     * @param provider (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteUserExternalLogin(userId?: string | undefined, provider?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Adds a new role to the specified user.
     * @param userId (optional) 
     * @param roleId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    addUserRole(userId?: string | undefined, roleId?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Removes an existing role from the specified user.
     * @param userId (optional) 
     * @param roleId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteUserRole(userId?: string | undefined, roleId?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Toggles user block state.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    setUserBlock(userId?: string | undefined, body?: SetUserBlockRequest | undefined): Observable<void>;
    /**
     * Sets the password for a given user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    setPassword(userId?: string | undefined, body?: SetPasswordRequest | undefined): Observable<void>;
    /**
     * Unlocks a user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    unlockUser(userId?: string | undefined, body?: any | undefined): Observable<void>;
    /**
     * Gets the list of sign in logs produced by the Identity system.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param from (optional) 
     * @param to (optional) 
     * @param applicationId (optional) 
     * @param subjectId (optional) 
     * @param sessionId (optional) 
     * @param signInType (optional) 
     * @param markForReview (optional) 
     * @param body (optional) 
     * @return OK
     */
    getSignInLogs(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, from?: string | undefined, to?: string | undefined, applicationId?: string | undefined, subjectId?: string | undefined, sessionId?: string | undefined, signInType?: string | undefined, markForReview?: boolean | undefined, body?: any | undefined): Observable<SignInLogEntryResultSet>;
    /**
     * Patches the specified log entry by updating the properties given in the request.
     * @param body (optional) 
     * @return No Content
     */
    patchSignInLog(rowId: string, body?: SignInLogEntryRequest | undefined): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class IdentityApiService implements IIdentityApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(IDENTITY_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Generates a password reset token and sends it to the user via email.
     * @param body (optional) 
     * @return No Content
     */
    forgotPassword(body?: ForgotPasswordRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/account/forgot-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processForgotPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processForgotPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processForgotPassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Changes the password of the user confirming the code received during forgot password process.
     * @param body (optional) 
     * @return No Content
     */
    forgotPasswordConfirmation(body?: ForgotPasswordConfirmationRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/account/forgot-password/confirmation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processForgotPasswordConfirmation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processForgotPasswordConfirmation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processForgotPasswordConfirmation(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets the password options that are applied when the user creates an account.
     * @return OK
     */
    getPasswordOptions(): Observable<PasswordOptions> {
        let url_ = this.baseUrl + "/api/account/password-options";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPasswordOptions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPasswordOptions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PasswordOptions>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PasswordOptions>;
        }));
    }

    protected processGetPasswordOptions(response: HttpResponseBase): Observable<PasswordOptions> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PasswordOptions.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Self-service user registration endpoint.
     * @param body (optional) 
     * @return No Content
     */
    register(body?: RegisterRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/account/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Checks if a username already exists in the database.
     * @param body (optional) 
     * @return No Content
     */
    checkUserNameExists(body?: ValidateUserNameRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/account/username-exists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckUserNameExists(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckUserNameExists(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCheckUserNameExists(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 410) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result410: any = null;
            let resultData410 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result410 = ProblemDetails.fromJS(resultData410);
            return throwException("Gone", status, _responseText, _headers, result410);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Validates a user's password against one or more configured IPasswordValidator.
     * @param body (optional) 
     * @return OK
     */
    validatePassword(body?: ValidatePasswordRequest | undefined): Observable<CredentialsValidationInfo> {
        let url_ = this.baseUrl + "/api/account/validate-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processValidatePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processValidatePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CredentialsValidationInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CredentialsValidationInfo>;
        }));
    }

    protected processValidatePassword(response: HttpResponseBase): Observable<CredentialsValidationInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CredentialsValidationInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Returns a list of AppSettingInfo objects containing the total number of application settings in the database and the data filtered according to the provided AppSettingInfo.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getSettings(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<AppSettingInfoResultSet> {
        let url_ = this.baseUrl + "/api/app-settings?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSettings(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppSettingInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppSettingInfoResultSet>;
        }));
    }

    protected processGetSettings(response: HttpResponseBase): Observable<AppSettingInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppSettingInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Creates a new application setting.
     * @param body (optional) 
     * @return Created
     */
    createSetting(body?: CreateAppSettingRequest | undefined): Observable<AppSettingInfo> {
        let url_ = this.baseUrl + "/api/app-settings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateSetting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateSetting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppSettingInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppSettingInfo>;
        }));
    }

    protected processCreateSetting(response: HttpResponseBase): Observable<AppSettingInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = AppSettingInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets an application setting by it's key.
     * @param key (optional) 
     * @param body (optional) 
     * @return OK
     */
    getSettingByKey(key?: string | undefined, body?: any | undefined): Observable<AppSettingInfo> {
        let url_ = this.baseUrl + "/api/app-settings/{key}";
        if (key !== null && key !== undefined)
        url_ = url_.replace("{key}", encodeURIComponent("" + key));
        else
            url_ = url_.replace("/{key}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSettingByKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSettingByKey(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppSettingInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppSettingInfo>;
        }));
    }

    protected processGetSettingByKey(response: HttpResponseBase): Observable<AppSettingInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppSettingInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates an existing application setting.
     * @param key (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateSetting(key?: string | undefined, body?: UpdateAppSettingRequest | undefined): Observable<AppSettingInfo> {
        let url_ = this.baseUrl + "/api/app-settings/{key}";
        if (key !== null && key !== undefined)
        url_ = url_.replace("{key}", encodeURIComponent("" + key));
        else
            url_ = url_.replace("/{key}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateSetting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSetting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppSettingInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppSettingInfo>;
        }));
    }

    protected processUpdateSetting(response: HttpResponseBase): Observable<AppSettingInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppSettingInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Permanently deletes an application setting.
     * @param key (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteSetting(key?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/app-settings/{key}";
        if (key !== null && key !== undefined)
        url_ = url_.replace("{key}", encodeURIComponent("" + key));
        else
            url_ = url_.replace("/{key}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteSetting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteSetting(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteSetting(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Loads the appsettings.json file and saves the configuration in the database.
     * @param hardRefresh (optional) 
     * @param body (optional) 
     * @return No Content
     */
    loadFromAppSettingsJson(hardRefresh?: boolean | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/app-settings/load?";
        if (hardRefresh === null)
            throw new Error("The parameter 'hardRefresh' cannot be null.");
        else if (hardRefresh !== undefined)
            url_ += "hardRefresh=" + encodeURIComponent("" + hardRefresh) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLoadFromAppSettingsJson(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLoadFromAppSettingsJson(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processLoadFromAppSettingsJson(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Returns a list of ClaimTypeInfo objects containing the total number of claim types in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param required (optional) 
     * @param body (optional) 
     * @return OK
     */
    getClaimTypes(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, required?: boolean | undefined, body?: any | undefined): Observable<ClaimTypeInfoResultSet> {
        let url_ = this.baseUrl + "/api/claim-types?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (required === null)
            throw new Error("The parameter 'required' cannot be null.");
        else if (required !== undefined)
            url_ += "Required=" + encodeURIComponent("" + required) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClaimTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClaimTypes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClaimTypeInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClaimTypeInfoResultSet>;
        }));
    }

    protected processGetClaimTypes(response: HttpResponseBase): Observable<ClaimTypeInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimTypeInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Creates a new claim type.
     * @param body (optional) 
     * @return Created
     */
    createClaimType(body?: CreateClaimTypeRequest | undefined): Observable<ClaimTypeInfo> {
        let url_ = this.baseUrl + "/api/claim-types";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateClaimType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateClaimType(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClaimTypeInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClaimTypeInfo>;
        }));
    }

    protected processCreateClaimType(response: HttpResponseBase): Observable<ClaimTypeInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ClaimTypeInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets a claim type by it's unique id.
     * @param claimTypeId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getClaimType(claimTypeId?: string | undefined, body?: any | undefined): Observable<ClaimTypeInfo> {
        let url_ = this.baseUrl + "/api/claim-types/{claimTypeId}";
        if (claimTypeId !== null && claimTypeId !== undefined)
        url_ = url_.replace("{claimTypeId}", encodeURIComponent("" + claimTypeId));
        else
            url_ = url_.replace("/{claimTypeId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClaimType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClaimType(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClaimTypeInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClaimTypeInfo>;
        }));
    }

    protected processGetClaimType(response: HttpResponseBase): Observable<ClaimTypeInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimTypeInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates an existing claim type.
     * @param claimTypeId (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateClaimType(claimTypeId?: string | undefined, body?: UpdateClaimTypeRequest | undefined): Observable<ClaimTypeInfo> {
        let url_ = this.baseUrl + "/api/claim-types/{claimTypeId}";
        if (claimTypeId !== null && claimTypeId !== undefined)
        url_ = url_.replace("{claimTypeId}", encodeURIComponent("" + claimTypeId));
        else
            url_ = url_.replace("/{claimTypeId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateClaimType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateClaimType(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClaimTypeInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClaimTypeInfo>;
        }));
    }

    protected processUpdateClaimType(response: HttpResponseBase): Observable<ClaimTypeInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimTypeInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Permanently deletes an existing claim type.
     * @param claimTypeId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClaimType(claimTypeId?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/claim-types/{claimTypeId}";
        if (claimTypeId !== null && claimTypeId !== undefined)
        url_ = url_.replace("{claimTypeId}", encodeURIComponent("" + claimTypeId));
        else
            url_ = url_.replace("/{claimTypeId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteClaimType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteClaimType(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteClaimType(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Returns a list of ClientInfo objects containing the total number of claim types in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getClients(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<ClientInfoResultSet> {
        let url_ = this.baseUrl + "/api/clients?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClients(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClients(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClientInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClientInfoResultSet>;
        }));
    }

    protected processGetClients(response: HttpResponseBase): Observable<ClientInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Creates a new client.
     * @param body (optional) 
     * @return Created
     */
    createClient(body?: CreateClientRequest | undefined): Observable<ClientInfo> {
        let url_ = this.baseUrl + "/api/clients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateClient(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClientInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClientInfo>;
        }));
    }

    protected processCreateClient(response: HttpResponseBase): Observable<ClientInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ClientInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets a client by it's unique id.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getClient(clientId?: string | undefined, body?: any | undefined): Observable<SingleClientInfo> {
        let url_ = this.baseUrl + "/api/clients/{clientId}";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClient(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SingleClientInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SingleClientInfo>;
        }));
    }

    protected processGetClient(response: HttpResponseBase): Observable<SingleClientInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SingleClientInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates an existing client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    updateClient(clientId?: string | undefined, body?: UpdateClientRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateClient(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Permanently deletes an existing client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClient(clientId?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteClient(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds a new secret, from a certificate, to an existing client.
     * @param clientId (optional) 
     * @return OK
     */
    uploadCertificate(body: Blob, clientId?: string | undefined): Observable<SecretInfo> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/certificates";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = body;

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "multipart/form-data",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadCertificate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadCertificate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SecretInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SecretInfo>;
        }));
    }

    protected processUploadCertificate(response: HttpResponseBase): Observable<SecretInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SecretInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Downloads a client secret if it is a certificate.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getCertificate(secretId: number, clientId?: string | undefined, body?: any | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/certificates/{secretId}";
        if (secretId === undefined || secretId === null)
            throw new Error("The parameter 'secretId' must be defined.");
        url_ = url_.replace("{secretId}", encodeURIComponent("" + secretId));
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/x-x509-user-cert"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCertificate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCertificate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processGetCertificate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds a claim for the specified client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    addClientClaim(clientId?: string | undefined, body?: CreateClaimRequest | undefined): Observable<ClaimInfo> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/claims";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddClientClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddClientClaim(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClaimInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClaimInfo>;
        }));
    }

    protected processAddClientClaim(response: HttpResponseBase): Observable<ClaimInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Removes an identity resource from the specified client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClientClaim(claimId: number, clientId?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/claims/{claimId}";
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined.");
        url_ = url_.replace("{claimId}", encodeURIComponent("" + claimId));
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteClientClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteClientClaim(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteClientClaim(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds a grant type to the specified client.
     * @param clientId (optional) 
     * @param grantType (optional) 
     * @param body (optional) 
     * @return OK
     */
    addClientGrantType(clientId?: string | undefined, grantType?: string | undefined, body?: any | undefined): Observable<GrantTypeInfo> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/grant-types/{grantType}";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        if (grantType !== null && grantType !== undefined)
        url_ = url_.replace("{grantType}", encodeURIComponent("" + grantType));
        else
            url_ = url_.replace("/{grantType}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddClientGrantType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddClientGrantType(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GrantTypeInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GrantTypeInfo>;
        }));
    }

    protected processAddClientGrantType(response: HttpResponseBase): Observable<GrantTypeInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GrantTypeInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Removes a grant type from the specified client.
     * @param clientId (optional) 
     * @param grantType (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClientGrantType(clientId?: string | undefined, grantType?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/grant-types/{grantType}";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        if (grantType !== null && grantType !== undefined)
        url_ = url_.replace("{grantType}", encodeURIComponent("" + grantType));
        else
            url_ = url_.replace("/{grantType}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteClientGrantType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteClientGrantType(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteClientGrantType(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds an identity resource to the specified client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    addClientResources(clientId?: string | undefined, body?: string[] | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/resources";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddClientResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddClientResources(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddClientResources(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Removes a range of identity resources from the specified client.
     * @param clientId (optional) 
     * @param resources (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClientResource(clientId?: string | undefined, resources?: string[] | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/resources?";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        if (resources === null)
            throw new Error("The parameter 'resources' cannot be null.");
        else if (resources !== undefined)
            resources && resources.forEach(item => { url_ += "resources=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteClientResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteClientResource(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteClientResource(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds a new secret to an existing client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    addClientSecret(clientId?: string | undefined, body?: CreateSecretRequest | undefined): Observable<SecretInfo> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/secrets";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddClientSecret(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddClientSecret(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SecretInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SecretInfo>;
        }));
    }

    protected processAddClientSecret(response: HttpResponseBase): Observable<SecretInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SecretInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Removes a specified secret from a client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteClientSecret(secretId: number, clientId?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/secrets/{secretId}";
        if (secretId === undefined || secretId === null)
            throw new Error("The parameter 'secretId' must be defined.");
        url_ = url_.replace("{secretId}", encodeURIComponent("" + secretId));
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteClientSecret(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteClientSecret(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteClientSecret(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets the UI configuration for the specified client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getClientTheme(clientId?: string | undefined, body?: any | undefined): Observable<ClientThemeConfigResponse> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/theme";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClientTheme(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClientTheme(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClientThemeConfigResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClientThemeConfigResponse>;
        }));
    }

    protected processGetClientTheme(response: HttpResponseBase): Observable<ClientThemeConfigResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientThemeConfigResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Creates or updates the ui configuration for the specified client.
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    createOrUpdateClientTheme(clientId?: string | undefined, body?: ClientThemeConfigRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/theme";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateClientTheme(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateClientTheme(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCreateOrUpdateClientTheme(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Renews the list of client urls (redirect cors etc).
     * @param clientId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    updateClientUrls(clientId?: string | undefined, body?: UpdateClientUrls | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/clients/{clientId}/urls";
        if (clientId !== null && clientId !== undefined)
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        else
            url_ = url_.replace("/{clientId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateClientUrls(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateClientUrls(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateClientUrls(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets the metadata of a certificate for display.
     * @return OK
     */
    getCertificateMetadata(body: Blob): Observable<SecretInfoBase> {
        let url_ = this.baseUrl + "/api/clients/certificates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = body;

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "multipart/form-data",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCertificateMetadata(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCertificateMetadata(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SecretInfoBase>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SecretInfoBase>;
        }));
    }

    protected processGetCertificateMetadata(response: HttpResponseBase): Observable<SecretInfoBase> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SecretInfoBase.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Displays blog posts from the official IdentityServer blog.
     * @param page (optional) 
     * @param size (optional) 
     * @return OK
     */
    getNews(page?: number | undefined, size?: number | undefined): Observable<BlogItemInfoResultSet> {
        let url_ = this.baseUrl + "/api/dashboard/news?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "size=" + encodeURIComponent("" + size) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNews(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNews(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BlogItemInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BlogItemInfoResultSet>;
        }));
    }

    protected processGetNews(response: HttpResponseBase): Observable<BlogItemInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BlogItemInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets some useful information as a summary of the system.
     * @param body (optional) 
     * @return OK
     */
    getSystemSummary(body?: any | undefined): Observable<SummaryInfo> {
        let url_ = this.baseUrl + "/api/dashboard/summary";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSystemSummary(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSystemSummary(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SummaryInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SummaryInfo>;
        }));
    }

    protected processGetSystemSummary(response: HttpResponseBase): Observable<SummaryInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SummaryInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets the UI features status.
     * @return OK
     */
    getUiFeatures(): Observable<UiFeaturesInfo> {
        let url_ = this.baseUrl + "/api/dashboard/ui";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUiFeatures(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUiFeatures(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UiFeaturesInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UiFeaturesInfo>;
        }));
    }

    protected processGetUiFeatures(response: HttpResponseBase): Observable<UiFeaturesInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UiFeaturesInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets the list of available external providers.
     * @param body (optional) 
     * @return OK
     */
    getExternalProviders(body?: any | undefined): Observable<ExternalProviderResultSet> {
        let url_ = this.baseUrl + "/api/lookups/external-providers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExternalProviders(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExternalProviders(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExternalProviderResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExternalProviderResultSet>;
        }));
    }

    protected processGetExternalProviders(response: HttpResponseBase): Observable<ExternalProviderResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExternalProviderResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Permanently deletes current user's account.
     * @param body (optional) 
     * @return No Content
     */
    deleteAccount(body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/my/account";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAccount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteAccount(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets the claims of the user.
     * @param body (optional) 
     * @return OK
     */
    getClaims(body?: any | undefined): Observable<ClaimInfoResultSet> {
        let url_ = this.baseUrl + "/api/my/account/claims";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClaims(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClaimInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClaimInfoResultSet>;
        }));
    }

    protected processGetClaims(response: HttpResponseBase): Observable<ClaimInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds the requested claims on the current user's account.
     * @param body (optional) 
     * @return OK
     */
    addClaims(body?: any | undefined): Observable<ClaimInfoResultSet> {
        let url_ = this.baseUrl + "/api/my/account/claims";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddClaims(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClaimInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClaimInfoResultSet>;
        }));
    }

    protected processAddClaims(response: HttpResponseBase): Observable<ClaimInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Upserts the requested claims on the current user's account.
     * @param body (optional) 
     * @return OK
     */
    patchClaims(body?: any | undefined): Observable<ClaimInfoResultSet> {
        let url_ = this.baseUrl + "/api/my/account/claims";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPatchClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPatchClaims(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClaimInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClaimInfoResultSet>;
        }));
    }

    protected processPatchClaims(response: HttpResponseBase): Observable<ClaimInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates the specified claim for the current user.
     * @param body (optional) 
     * @return OK
     */
    updateClaim(claimId: number, body?: UpdateUserClaimRequest | undefined): Observable<ClaimInfo> {
        let url_ = this.baseUrl + "/api/my/account/claims/{claimId}";
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined.");
        url_ = url_.replace("{claimId}", encodeURIComponent("" + claimId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateClaim(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClaimInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClaimInfo>;
        }));
    }

    protected processUpdateClaim(response: HttpResponseBase): Observable<ClaimInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates the email of the current user.
     * @param body (optional) 
     * @return No Content
     */
    updateEmail(body?: UpdateUserEmailRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/my/account/email";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateEmail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Confirms the email address of a given user.
     * @param body (optional) 
     * @return No Content
     */
    confirmEmail(body?: ConfirmEmailRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/my/account/email/confirmation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processConfirmEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConfirmEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processConfirmEmail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets the consents given by the user.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param consentType (optional) 
     * @param clientId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getConsents(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, consentType?: string | undefined, clientId?: string | undefined, body?: any | undefined): Observable<UserConsentInfoResultSet> {
        let url_ = this.baseUrl + "/api/my/account/grants?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (consentType === null)
            throw new Error("The parameter 'consentType' cannot be null.");
        else if (consentType !== undefined)
            url_ += "ConsentType=" + encodeURIComponent("" + consentType) + "&";
        if (clientId === null)
            throw new Error("The parameter 'clientId' cannot be null.");
        else if (clientId !== undefined)
            url_ += "ClientId=" + encodeURIComponent("" + clientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConsents(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConsents(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserConsentInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserConsentInfoResultSet>;
        }));
    }

    protected processGetConsents(response: HttpResponseBase): Observable<UserConsentInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserConsentInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates the max devices count.
     * @param body (optional) 
     * @return No Content
     */
    updateMaxDevicesCount(body?: UpdateMaxDevicesCountRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/my/account/max-devices-count";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateMaxDevicesCount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMaxDevicesCount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateMaxDevicesCount(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Changes the password for the current user, but requires the old password to be present.
     * @param body (optional) 
     * @return No Content
     */
    updatePassword(body?: ChangePasswordRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/my/account/password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdatePassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates the password expiration policy.
     * @param body (optional) 
     * @return No Content
     */
    updatePasswordExpirationPolicy(body?: UpdatePasswordExpirationPolicyRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/my/account/password-expiration-policy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePasswordExpirationPolicy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePasswordExpirationPolicy(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdatePasswordExpirationPolicy(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Requests a phone number change for the current user.
     * @param body (optional) 
     * @return No Content
     */
    updatePhoneNumber(body?: UpdateUserPhoneNumberRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/my/account/phone-number";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePhoneNumber(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePhoneNumber(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdatePhoneNumber(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Confirms the phone number of the user, using the OTP token.
     * @param body (optional) 
     * @return No Content
     */
    confirmPhoneNumber(body?: ConfirmPhoneNumberRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/my/account/phone-number/confirmation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processConfirmPhoneNumber(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConfirmPhoneNumber(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processConfirmPhoneNumber(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Changes the username for the current user.
     * @param body (optional) 
     * @return No Content
     */
    updateUserName(body?: UpdateUserNameRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/my/account/username";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateUserName(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Returns a list of IdentityResourceInfo objects containing the total number of identity resources in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getIdentityResources(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<IdentityResourceInfoResultSet> {
        let url_ = this.baseUrl + "/api/resources/identity?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIdentityResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIdentityResources(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IdentityResourceInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IdentityResourceInfoResultSet>;
        }));
    }

    protected processGetIdentityResources(response: HttpResponseBase): Observable<IdentityResourceInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdentityResourceInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets an identity resource by it's unique id.
     * @param body (optional) 
     * @return OK
     */
    getIdentityResource(resourceId: number, body?: any | undefined): Observable<IdentityResourceInfo> {
        let url_ = this.baseUrl + "/api/resources/identity/{resourceId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIdentityResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIdentityResource(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IdentityResourceInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IdentityResourceInfo>;
        }));
    }

    protected processGetIdentityResource(response: HttpResponseBase): Observable<IdentityResourceInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdentityResourceInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Creates a new identity resource.
     * @param body (optional) 
     * @return Created
     */
    createIdentityResource(body?: CreateResourceRequest | undefined): Observable<IdentityResourceInfo> {
        let url_ = this.baseUrl + "/api/resources/identity/{resourceId}";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateIdentityResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateIdentityResource(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IdentityResourceInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IdentityResourceInfo>;
        }));
    }

    protected processCreateIdentityResource(response: HttpResponseBase): Observable<IdentityResourceInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = IdentityResourceInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates an identity resource.
     * @param body (optional) 
     * @return No Content
     */
    updateIdentityResource(resourceId: number, body?: UpdateIdentityResourceRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/identity/{resourceId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateIdentityResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateIdentityResource(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateIdentityResource(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Permanently deletes an identity resource.
     * @param body (optional) 
     * @return No Content
     */
    deleteIdentityResource(resourceId: number, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/identity/{resourceId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteIdentityResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteIdentityResource(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteIdentityResource(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds claims to an identity resource.
     * @param body (optional) 
     * @return No Content
     */
    addIdentityResourceClaims(resourceId: number, body?: string[] | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/identity/{resourceId}/claims";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddIdentityResourceClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddIdentityResourceClaims(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddIdentityResourceClaims(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Removes a specified claim from an identity resource.
     * @param claim (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteIdentityResourceClaim(resourceId: number, claim?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/identity/{resourceId}/claims/{claim}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        if (claim !== null && claim !== undefined)
        url_ = url_.replace("{claim}", encodeURIComponent("" + claim));
        else
            url_ = url_.replace("/{claim}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteIdentityResourceClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteIdentityResourceClaim(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteIdentityResourceClaim(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Returns a list of ApiResourceInfo objects containing the total number of API resources in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getApiResources(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<ApiResourceInfoResultSet> {
        let url_ = this.baseUrl + "/api/resources/protected?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApiResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApiResources(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResourceInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResourceInfoResultSet>;
        }));
    }

    protected processGetApiResources(response: HttpResponseBase): Observable<ApiResourceInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResourceInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Creates a new API resource.
     * @param body (optional) 
     * @return Created
     */
    createApiResource(body?: CreateResourceRequest | undefined): Observable<ApiResourceInfo> {
        let url_ = this.baseUrl + "/api/resources/protected";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateApiResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateApiResource(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResourceInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResourceInfo>;
        }));
    }

    protected processCreateApiResource(response: HttpResponseBase): Observable<ApiResourceInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ApiResourceInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets an API resource by it's unique id.
     * @param body (optional) 
     * @return OK
     */
    getApiResource(resourceId: number, body?: any | undefined): Observable<ApiResourceInfo> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApiResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApiResource(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResourceInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResourceInfo>;
        }));
    }

    protected processGetApiResource(response: HttpResponseBase): Observable<ApiResourceInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResourceInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates an API resource.
     * @param body (optional) 
     * @return No Content
     */
    updateApiResource(resourceId: number, body?: UpdateApiResourceRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateApiResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateApiResource(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateApiResource(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Permanently deletes an API resource.
     * @param body (optional) 
     * @return No Content
     */
    deleteApiResource(resourceId: number, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteApiResource(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteApiResource(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteApiResource(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds claims to an API resource.
     * @param body (optional) 
     * @return No Content
     */
    addApiResourceClaims(resourceId: number, body?: string[] | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/claims";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddApiResourceClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddApiResourceClaims(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddApiResourceClaims(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Removes a specified claim from an API resource.
     * @param claim (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteApiResourceClaim(resourceId: number, claim?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/claims/{claim}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        if (claim !== null && claim !== undefined)
        url_ = url_.replace("{claim}", encodeURIComponent("" + claim));
        else
            url_ = url_.replace("/{claim}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteApiResourceClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteApiResourceClaim(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteApiResourceClaim(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds a new scope to an existing API resource.
     * @param body (optional) 
     * @return OK
     */
    addApiResourceScope(resourceId: number, body?: CreateApiScopeRequest | undefined): Observable<ApiScopeInfo> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/scopes";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddApiResourceScope(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddApiResourceScope(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiScopeInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiScopeInfo>;
        }));
    }

    protected processAddApiResourceScope(response: HttpResponseBase): Observable<ApiScopeInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiScopeInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates a specified scope of an API resource.
     * @param body (optional) 
     * @return No Content
     */
    updateApiResourceScope(resourceId: number, scopeId: number, body?: UpdateApiScopeRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/scopes/{scopeId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        if (scopeId === undefined || scopeId === null)
            throw new Error("The parameter 'scopeId' must be defined.");
        url_ = url_.replace("{scopeId}", encodeURIComponent("" + scopeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateApiResourceScope(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateApiResourceScope(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateApiResourceScope(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Deletes a specified scope from an API resource.
     * @param body (optional) 
     * @return No Content
     */
    deleteApiResourceScope(resourceId: number, scopeId: number, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/scopes/{scopeId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        if (scopeId === undefined || scopeId === null)
            throw new Error("The parameter 'scopeId' must be defined.");
        url_ = url_.replace("{scopeId}", encodeURIComponent("" + scopeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteApiResourceScope(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteApiResourceScope(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteApiResourceScope(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds claims to an API scope of a protected resource.
     * @param body (optional) 
     * @return No Content
     */
    addApiResourceScopeClaims(resourceId: number, scopeId: number, body?: string[] | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/scopes/{scopeId}/claims";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        if (scopeId === undefined || scopeId === null)
            throw new Error("The parameter 'scopeId' must be defined.");
        url_ = url_.replace("{scopeId}", encodeURIComponent("" + scopeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddApiResourceScopeClaims(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddApiResourceScopeClaims(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddApiResourceScopeClaims(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Deletes a claim from an API scope of a protected resource.
     * @param claim (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteApiResourceScopeClaim(resourceId: number, scopeId: number, claim?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/scopes/{scopeId}/claims/{claim}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        if (scopeId === undefined || scopeId === null)
            throw new Error("The parameter 'scopeId' must be defined.");
        url_ = url_.replace("{scopeId}", encodeURIComponent("" + scopeId));
        if (claim !== null && claim !== undefined)
        url_ = url_.replace("{claim}", encodeURIComponent("" + claim));
        else
            url_ = url_.replace("/{claim}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteApiResourceScopeClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteApiResourceScopeClaim(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteApiResourceScopeClaim(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds a new scope to an existing API resource.
     * @param body (optional) 
     * @return OK
     */
    addApiResourceSecret(resourceId: number, body?: CreateSecretRequest | undefined): Observable<SecretInfo> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/secrets";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddApiResourceSecret(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddApiResourceSecret(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SecretInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SecretInfo>;
        }));
    }

    protected processAddApiResourceSecret(response: HttpResponseBase): Observable<SecretInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SecretInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Removes a specified claim from an API resource.
     * @param body (optional) 
     * @return No Content
     */
    deleteApiResourceSecret(resourceId: number, secretId: number, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/resources/protected/{resourceId}/secrets/{secretId}";
        if (resourceId === undefined || resourceId === null)
            throw new Error("The parameter 'resourceId' must be defined.");
        url_ = url_.replace("{resourceId}", encodeURIComponent("" + resourceId));
        if (secretId === undefined || secretId === null)
            throw new Error("The parameter 'secretId' must be defined.");
        url_ = url_.replace("{secretId}", encodeURIComponent("" + secretId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteApiResourceSecret(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteApiResourceSecret(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteApiResourceSecret(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Returns a list of ApiResourceInfo objects containing the total number of API resources in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getApiScopes(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<ApiScopeInfoResultSet> {
        let url_ = this.baseUrl + "/api/resources/protected/scopes?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetApiScopes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApiScopes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiScopeInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiScopeInfoResultSet>;
        }));
    }

    protected processGetApiScopes(response: HttpResponseBase): Observable<ApiScopeInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiScopeInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Returns a list of RoleInfo objects containing the total number of roles in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param body (optional) 
     * @return OK
     */
    getRoles(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, body?: any | undefined): Observable<RoleInfoResultSet> {
        let url_ = this.baseUrl + "/api/roles?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleInfoResultSet>;
        }));
    }

    protected processGetRoles(response: HttpResponseBase): Observable<RoleInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Creates a new role.
     * @param body (optional) 
     * @return Created
     */
    createRole(body?: CreateRoleRequest | undefined): Observable<RoleInfo> {
        let url_ = this.baseUrl + "/api/roles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleInfo>;
        }));
    }

    protected processCreateRole(response: HttpResponseBase): Observable<RoleInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = RoleInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets a role by it's unique id.
     * @param roleId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getRole(roleId?: string | undefined, body?: any | undefined): Observable<RoleInfo> {
        let url_ = this.baseUrl + "/api/roles/{roleId}";
        if (roleId !== null && roleId !== undefined)
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        else
            url_ = url_.replace("/{roleId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleInfo>;
        }));
    }

    protected processGetRole(response: HttpResponseBase): Observable<RoleInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates an existing role.
     * @param roleId (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateRole(roleId?: string | undefined, body?: UpdateRoleRequest | undefined): Observable<RoleInfo> {
        let url_ = this.baseUrl + "/api/roles/{roleId}";
        if (roleId !== null && roleId !== undefined)
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        else
            url_ = url_.replace("/{roleId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleInfo>;
        }));
    }

    protected processUpdateRole(response: HttpResponseBase): Observable<RoleInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Permanently deletes an existing role.
     * @param roleId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteRole(roleId?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/roles/{roleId}";
        if (roleId !== null && roleId !== undefined)
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        else
            url_ = url_.replace("/{roleId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteRole(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Returns a list of UserInfo objects containing the total number of users in the database and the data filtered according to the provided ListOptions.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param claimType (optional) 
     * @param claimValue (optional) 
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUsers(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, claimType?: string | undefined, claimValue?: string | undefined, userId?: string[] | undefined, body?: any | undefined): Observable<UserInfoResultSet> {
        let url_ = this.baseUrl + "/api/users?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (claimType === null)
            throw new Error("The parameter 'claimType' cannot be null.");
        else if (claimType !== undefined)
            url_ += "ClaimType=" + encodeURIComponent("" + claimType) + "&";
        if (claimValue === null)
            throw new Error("The parameter 'claimValue' cannot be null.");
        else if (claimValue !== undefined)
            url_ += "ClaimValue=" + encodeURIComponent("" + claimValue) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            userId && userId.forEach(item => { url_ += "UserId=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserInfoResultSet>;
        }));
    }

    protected processGetUsers(response: HttpResponseBase): Observable<UserInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Creates a new user.
     * @param body (optional) 
     * @return Created
     */
    createUser(body?: CreateUserRequest | undefined): Observable<SingleUserInfo> {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SingleUserInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SingleUserInfo>;
        }));
    }

    protected processCreateUser(response: HttpResponseBase): Observable<SingleUserInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = SingleUserInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets a user by it's unique id.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUser(userId?: string | undefined, body?: any | undefined): Observable<SingleUserInfo> {
        let url_ = this.baseUrl + "/api/users/{userId}";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SingleUserInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SingleUserInfo>;
        }));
    }

    protected processGetUser(response: HttpResponseBase): Observable<SingleUserInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SingleUserInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates an existing user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateUser(userId?: string | undefined, body?: UpdateUserRequest | undefined): Observable<SingleUserInfo> {
        let url_ = this.baseUrl + "/api/users/{userId}";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SingleUserInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SingleUserInfo>;
        }));
    }

    protected processUpdateUser(response: HttpResponseBase): Observable<SingleUserInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SingleUserInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Permanently deletes an existing user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteUser(userId?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets a list of the applications the user has given consent to or currently has IdentityServer side tokens for.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUserApplications(userId?: string | undefined, body?: any | undefined): Observable<UserClientInfoResultSet> {
        let url_ = this.baseUrl + "/api/users/{userId}/applications";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserApplications(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserApplications(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserClientInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserClientInfoResultSet>;
        }));
    }

    protected processGetUserApplications(response: HttpResponseBase): Observable<UserClientInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserClientInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds a claim for the specified user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return Created
     */
    addUserClaim(userId?: string | undefined, body?: CreateClaimRequest | undefined): Observable<ClaimInfo> {
        let url_ = this.baseUrl + "/api/users/{userId}/claims";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddUserClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUserClaim(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClaimInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClaimInfo>;
        }));
    }

    protected processAddUserClaim(response: HttpResponseBase): Observable<ClaimInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ClaimInfo.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets a specified claim for a given user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUserClaim(claimId: number, userId?: string | undefined, body?: any | undefined): Observable<BasicClaimInfo> {
        let url_ = this.baseUrl + "/api/users/{userId}/claims/{claimId}";
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined.");
        url_ = url_.replace("{claimId}", encodeURIComponent("" + claimId));
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserClaim(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BasicClaimInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BasicClaimInfo>;
        }));
    }

    protected processGetUserClaim(response: HttpResponseBase): Observable<BasicClaimInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BasicClaimInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Updates an existing user claim.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateUserClaim(claimId: number, userId?: string | undefined, body?: UpdateUserClaimRequest | undefined): Observable<ClaimInfo> {
        let url_ = this.baseUrl + "/api/users/{userId}/claims/{claimId}";
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined.");
        url_ = url_.replace("{claimId}", encodeURIComponent("" + claimId));
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserClaim(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClaimInfo>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClaimInfo>;
        }));
    }

    protected processUpdateUserClaim(response: HttpResponseBase): Observable<ClaimInfo> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Permanently deletes a specified claim from a user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteUserClaim(claimId: number, userId?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/claims/{claimId}";
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined.");
        url_ = url_.replace("{claimId}", encodeURIComponent("" + claimId));
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUserClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUserClaim(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteUserClaim(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets a list of the devices of the specified user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUserDevices(userId?: string | undefined, body?: any | undefined): Observable<DeviceInfoResultSet> {
        let url_ = this.baseUrl + "/api/users/{userId}/devices";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserDevices(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserDevices(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeviceInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeviceInfoResultSet>;
        }));
    }

    protected processGetUserDevices(response: HttpResponseBase): Observable<DeviceInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Resends the confirmation email for a given user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    resendConfirmationEmail(userId?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/email/confirmation";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResendConfirmationEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResendConfirmationEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processResendConfirmationEmail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets a list of the external login providers for the specified user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return OK
     */
    getUserExternalLogins(userId?: string | undefined, body?: any | undefined): Observable<UserLoginProviderInfoResultSet> {
        let url_ = this.baseUrl + "/api/users/{userId}/external-logins";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserExternalLogins(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserExternalLogins(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserLoginProviderInfoResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserLoginProviderInfoResultSet>;
        }));
    }

    protected processGetUserExternalLogins(response: HttpResponseBase): Observable<UserLoginProviderInfoResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserLoginProviderInfoResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Permanently deletes a specified login provider association from a user.
     * @param userId (optional) 
     * @param provider (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteUserExternalLogin(userId?: string | undefined, provider?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/external-logins/{provider}";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        if (provider !== null && provider !== undefined)
        url_ = url_.replace("{provider}", encodeURIComponent("" + provider));
        else
            url_ = url_.replace("/{provider}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUserExternalLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUserExternalLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteUserExternalLogin(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Adds a new role to the specified user.
     * @param userId (optional) 
     * @param roleId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    addUserRole(userId?: string | undefined, roleId?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/roles/{roleId}";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        if (roleId !== null && roleId !== undefined)
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        else
            url_ = url_.replace("/{roleId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddUserRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUserRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddUserRole(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Removes an existing role from the specified user.
     * @param userId (optional) 
     * @param roleId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    deleteUserRole(userId?: string | undefined, roleId?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/roles/{roleId}";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        if (roleId !== null && roleId !== undefined)
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        else
            url_ = url_.replace("/{roleId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUserRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUserRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteUserRole(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Toggles user block state.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    setUserBlock(userId?: string | undefined, body?: SetUserBlockRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/set-block";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetUserBlock(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetUserBlock(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetUserBlock(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Sets the password for a given user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    setPassword(userId?: string | undefined, body?: SetPasswordRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/set-password";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetPassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Unlocks a user.
     * @param userId (optional) 
     * @param body (optional) 
     * @return No Content
     */
    unlockUser(userId?: string | undefined, body?: any | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/unlock";
        if (userId !== null && userId !== undefined)
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        else
            url_ = url_.replace("/{userId}", "");
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnlockUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnlockUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUnlockUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets the list of sign in logs produced by the Identity system.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @param from (optional) 
     * @param to (optional) 
     * @param applicationId (optional) 
     * @param subjectId (optional) 
     * @param sessionId (optional) 
     * @param signInType (optional) 
     * @param markForReview (optional) 
     * @param body (optional) 
     * @return OK
     */
    getSignInLogs(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined, from?: string | undefined, to?: string | undefined, applicationId?: string | undefined, subjectId?: string | undefined, sessionId?: string | undefined, signInType?: string | undefined, markForReview?: boolean | undefined, body?: any | undefined): Observable<SignInLogEntryResultSet> {
        let url_ = this.baseUrl + "/sign-in-logs?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (from === null)
            throw new Error("The parameter 'from' cannot be null.");
        else if (from !== undefined)
            url_ += "From=" + encodeURIComponent("" + from) + "&";
        if (to === null)
            throw new Error("The parameter 'to' cannot be null.");
        else if (to !== undefined)
            url_ += "To=" + encodeURIComponent("" + to) + "&";
        if (applicationId === null)
            throw new Error("The parameter 'applicationId' cannot be null.");
        else if (applicationId !== undefined)
            url_ += "ApplicationId=" + encodeURIComponent("" + applicationId) + "&";
        if (subjectId === null)
            throw new Error("The parameter 'subjectId' cannot be null.");
        else if (subjectId !== undefined)
            url_ += "SubjectId=" + encodeURIComponent("" + subjectId) + "&";
        if (sessionId === null)
            throw new Error("The parameter 'sessionId' cannot be null.");
        else if (sessionId !== undefined)
            url_ += "SessionId=" + encodeURIComponent("" + sessionId) + "&";
        if (signInType === null)
            throw new Error("The parameter 'signInType' cannot be null.");
        else if (signInType !== undefined)
            url_ += "SignInType=" + encodeURIComponent("" + signInType) + "&";
        if (markForReview === null)
            throw new Error("The parameter 'markForReview' cannot be null.");
        else if (markForReview !== undefined)
            url_ += "MarkForReview=" + encodeURIComponent("" + markForReview) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSignInLogs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSignInLogs(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SignInLogEntryResultSet>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SignInLogEntryResultSet>;
        }));
    }

    protected processGetSignInLogs(response: HttpResponseBase): Observable<SignInLogEntryResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SignInLogEntryResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Patches the specified log entry by updating the properties given in the request.
     * @param body (optional) 
     * @return No Content
     */
    patchSignInLog(rowId: string, body?: SignInLogEntryRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/sign-in-logs/{rowId}";
        if (rowId === undefined || rowId === null)
            throw new Error("The parameter 'rowId' must be defined.");
        url_ = url_.replace("{rowId}", encodeURIComponent("" + rowId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPatchSignInLog(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPatchSignInLog(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPatchSignInLog(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export enum AccessTokenType {
    _0 = 0,
    _1 = 1,
}

/** Models an API resource for the application. */
export class ApiResourceInfo implements IApiResourceInfo {
    /** Unique identifier for the API resource. */
    id?: number;
    /** The name of the resource. */
    name?: string | undefined;
    /** The display name of the resource. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this resource is enabled or not. */
    enabled?: boolean;
    /** Determines whether this resource is editable or not. */
    nonEditable?: boolean;
    /** List of associated claims that should be included when this resource is requested. */
    allowedClaims?: string[] | undefined;
    /** List of all scopes included in the resource. At least one scope must be included. */
    scopes?: ApiScopeInfo[] | undefined;
    secrets?: ApiSecretInfo[] | undefined;

    constructor(data?: IApiResourceInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.nonEditable = _data["nonEditable"];
            if (Array.isArray(_data["allowedClaims"])) {
                this.allowedClaims = [] as any;
                for (let item of _data["allowedClaims"])
                    this.allowedClaims!.push(item);
            }
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(ApiScopeInfo.fromJS(item));
            }
            if (Array.isArray(_data["secrets"])) {
                this.secrets = [] as any;
                for (let item of _data["secrets"])
                    this.secrets!.push(ApiSecretInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResourceInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResourceInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["nonEditable"] = this.nonEditable;
        if (Array.isArray(this.allowedClaims)) {
            data["allowedClaims"] = [];
            for (let item of this.allowedClaims)
                data["allowedClaims"].push(item);
        }
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item.toJSON());
        }
        if (Array.isArray(this.secrets)) {
            data["secrets"] = [];
            for (let item of this.secrets)
                data["secrets"].push(item.toJSON());
        }
        return data;
    }
}

/** Models an API resource for the application. */
export interface IApiResourceInfo {
    /** Unique identifier for the API resource. */
    id?: number;
    /** The name of the resource. */
    name?: string | undefined;
    /** The display name of the resource. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this resource is enabled or not. */
    enabled?: boolean;
    /** Determines whether this resource is editable or not. */
    nonEditable?: boolean;
    /** List of associated claims that should be included when this resource is requested. */
    allowedClaims?: string[] | undefined;
    /** List of all scopes included in the resource. At least one scope must be included. */
    scopes?: ApiScopeInfo[] | undefined;
    secrets?: ApiSecretInfo[] | undefined;
}

export class ApiResourceInfoResultSet implements IApiResourceInfoResultSet {
    count?: number;
    items?: ApiResourceInfo[] | undefined;

    constructor(data?: IApiResourceInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ApiResourceInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResourceInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResourceInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResourceInfoResultSet {
    count?: number;
    items?: ApiResourceInfo[] | undefined;
}

/** Models access to an API resource. */
export class ApiScopeInfo implements IApiScopeInfo {
    /** Unique identifier for the scope. */
    id?: number;
    /** The name of the scope. */
    name?: string | undefined;
    /** The display name of the scope. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean | undefined;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean | undefined;
    /** Translations. */
    translations?: { [key: string]: ApiScopeTranslation; } | undefined;
    /** List of associated user claims that should be included when a resource is requested. */
    userClaims?: string[] | undefined;

    constructor(data?: IApiScopeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.emphasize = _data["emphasize"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            if (_data["translations"]) {
                this.translations = {} as any;
                for (let key in _data["translations"]) {
                    if (_data["translations"].hasOwnProperty(key))
                        (<any>this.translations)![key] = _data["translations"][key] ? ApiScopeTranslation.fromJS(_data["translations"][key]) : new ApiScopeTranslation();
                }
            }
            if (Array.isArray(_data["userClaims"])) {
                this.userClaims = [] as any;
                for (let item of _data["userClaims"])
                    this.userClaims!.push(item);
            }
        }
    }

    static fromJS(data: any): ApiScopeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ApiScopeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["emphasize"] = this.emphasize;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        if (this.translations) {
            data["translations"] = {};
            for (let key in this.translations) {
                if (this.translations.hasOwnProperty(key))
                    (<any>data["translations"])[key] = this.translations[key] ? this.translations[key].toJSON() : <any>undefined;
            }
        }
        if (Array.isArray(this.userClaims)) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item);
        }
        return data;
    }
}

/** Models access to an API resource. */
export interface IApiScopeInfo {
    /** Unique identifier for the scope. */
    id?: number;
    /** The name of the scope. */
    name?: string | undefined;
    /** The display name of the scope. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean | undefined;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean | undefined;
    /** Translations. */
    translations?: { [key: string]: ApiScopeTranslation; } | undefined;
    /** List of associated user claims that should be included when a resource is requested. */
    userClaims?: string[] | undefined;
}

export class ApiScopeInfoResultSet implements IApiScopeInfoResultSet {
    count?: number;
    items?: ApiScopeInfo[] | undefined;

    constructor(data?: IApiScopeInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ApiScopeInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiScopeInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ApiScopeInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiScopeInfoResultSet {
    count?: number;
    items?: ApiScopeInfo[] | undefined;
}

/** Translation object for type Indice.Features.Identity.Server.Manager.Models.ApiScopeInfo. */
export class ApiScopeTranslation implements IApiScopeTranslation {
    /** The display name of the scope. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;

    constructor(data?: IApiScopeTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): ApiScopeTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new ApiScopeTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        return data;
    }
}

/** Translation object for type Indice.Features.Identity.Server.Manager.Models.ApiScopeInfo. */
export interface IApiScopeTranslation {
    /** The display name of the scope. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
}

/** Models an API secret used for the introspection endpoint. The API can authenticate with introspection using the API name and secret. */
export class ApiSecretInfo implements IApiSecretInfo {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    /** The type of client secret. */
    type?: string | undefined;
    /** The identifier for the API secret. */
    id?: number;
    /** Indicates if the secret is expired. */
    readonly isExpired?: boolean;

    constructor(data?: IApiSecretInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.value = _data["value"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.id = _data["id"];
            (<any>this).isExpired = _data["isExpired"];
        }
    }

    static fromJS(data: any): ApiSecretInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ApiSecretInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["value"] = this.value;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["id"] = this.id;
        data["isExpired"] = this.isExpired;
        return data;
    }
}

/** Models an API secret used for the introspection endpoint. The API can authenticate with introspection using the API name and secret. */
export interface IApiSecretInfo {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    /** The type of client secret. */
    type?: string | undefined;
    /** The identifier for the API secret. */
    id?: number;
    /** Indicates if the secret is expired. */
    isExpired?: boolean;
}

/** Models an application setting persisted in the database. */
export class AppSettingInfo implements IAppSettingInfo {
    /** The key of application setting. */
    key?: string | undefined;
    /** The value of application setting. */
    value?: string | undefined;

    constructor(data?: IAppSettingInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): AppSettingInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AppSettingInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

/** Models an application setting persisted in the database. */
export interface IAppSettingInfo {
    /** The key of application setting. */
    key?: string | undefined;
    /** The value of application setting. */
    value?: string | undefined;
}

export class AppSettingInfoResultSet implements IAppSettingInfoResultSet {
    count?: number;
    items?: AppSettingInfo[] | undefined;

    constructor(data?: IAppSettingInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AppSettingInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AppSettingInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new AppSettingInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAppSettingInfoResultSet {
    count?: number;
    items?: AppSettingInfo[] | undefined;
}

/** Models a claim. */
export class BasicClaimInfo implements IBasicClaimInfo {
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;

    constructor(data?: IBasicClaimInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): BasicClaimInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BasicClaimInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["value"] = this.value;
        return data;
    }
}

/** Models a claim. */
export interface IBasicClaimInfo {
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;
}

/** Describes a blog post item. */
export class BlogItemInfo implements IBlogItemInfo {
    /** Title of the post. */
    title?: string | undefined;
    /** Original link to the post. */
    link?: string | undefined;
    /** The datetime that the post was published. */
    publishDate?: Date;
    /** A small description for the post. */
    description?: string | undefined;

    constructor(data?: IBlogItemInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.link = _data["link"];
            this.publishDate = _data["publishDate"] ? new Date(_data["publishDate"].toString()) : <any>undefined;
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): BlogItemInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BlogItemInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["link"] = this.link;
        data["publishDate"] = this.publishDate ? this.publishDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        return data;
    }
}

/** Describes a blog post item. */
export interface IBlogItemInfo {
    /** Title of the post. */
    title?: string | undefined;
    /** Original link to the post. */
    link?: string | undefined;
    /** The datetime that the post was published. */
    publishDate?: Date;
    /** A small description for the post. */
    description?: string | undefined;
}

export class BlogItemInfoResultSet implements IBlogItemInfoResultSet {
    count?: number;
    items?: BlogItemInfo[] | undefined;

    constructor(data?: IBlogItemInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BlogItemInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BlogItemInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new BlogItemInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBlogItemInfoResultSet {
    count?: number;
    items?: BlogItemInfo[] | undefined;
}

/** Certificate upload request with optional password. */
export class CertificateUploadRequest implements ICertificateUploadRequest {
    /** File data */
    file!: string;
    /** Optional password in case this is a application/x-pkcs12 */
    password?: string | undefined;

    constructor(data?: ICertificateUploadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.file = _data["file"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): CertificateUploadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CertificateUploadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["file"] = this.file;
        data["password"] = this.password;
        return data;
    }
}

/** Certificate upload request with optional password. */
export interface ICertificateUploadRequest {
    /** File data */
    file: string;
    /** Optional password in case this is a application/x-pkcs12 */
    password?: string | undefined;
}

/** Models a password change request by the user. */
export class ChangePasswordRequest implements IChangePasswordRequest {
    /** The current password of the user. */
    oldPassword!: string;
    /** The new password of the user. */
    newPassword!: string;
    /** The new password confirmation. */
    newPasswordConfirmation?: string | undefined;

    constructor(data?: IChangePasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oldPassword = _data["oldPassword"];
            this.newPassword = _data["newPassword"];
            this.newPasswordConfirmation = _data["newPasswordConfirmation"];
        }
    }

    static fromJS(data: any): ChangePasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oldPassword"] = this.oldPassword;
        data["newPassword"] = this.newPassword;
        data["newPasswordConfirmation"] = this.newPasswordConfirmation;
        return data;
    }
}

/** Models a password change request by the user. */
export interface IChangePasswordRequest {
    /** The current password of the user. */
    oldPassword: string;
    /** The new password of the user. */
    newPassword: string;
    /** The new password confirmation. */
    newPasswordConfirmation?: string | undefined;
}

/** Models a claim. */
export class ClaimInfo implements IClaimInfo {
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;
    /** The id of the user claim entry. */
    id?: number;
    /** The display name of the claim. */
    displayName?: string | undefined;

    constructor(data?: IClaimInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.value = _data["value"];
            this.id = _data["id"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): ClaimInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["value"] = this.value;
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data;
    }
}

/** Models a claim. */
export interface IClaimInfo {
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;
    /** The id of the user claim entry. */
    id?: number;
    /** The display name of the claim. */
    displayName?: string | undefined;
}

export class ClaimInfoResultSet implements IClaimInfoResultSet {
    count?: number;
    items?: ClaimInfo[] | undefined;

    constructor(data?: IClaimInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ClaimInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClaimInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IClaimInfoResultSet {
    count?: number;
    items?: ClaimInfo[] | undefined;
}

/** Models an application claim type. */
export class ClaimTypeInfo implements IClaimTypeInfo {
    /** The unique id of the claim. */
    id?: string | undefined;
    /** The name. */
    name?: string | undefined;
    /** The name used for display purposes. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this is a system reserved claim. */
    reserved?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ClaimValueType;

    constructor(data?: IClaimTypeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.required = _data["required"];
            this.reserved = _data["reserved"];
            this.userEditable = _data["userEditable"];
            this.rule = _data["rule"];
            this.valueType = _data["valueType"];
        }
    }

    static fromJS(data: any): ClaimTypeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimTypeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["required"] = this.required;
        data["reserved"] = this.reserved;
        data["userEditable"] = this.userEditable;
        data["rule"] = this.rule;
        data["valueType"] = this.valueType;
        return data;
    }
}

/** Models an application claim type. */
export interface IClaimTypeInfo {
    /** The unique id of the claim. */
    id?: string | undefined;
    /** The name. */
    name?: string | undefined;
    /** The name used for display purposes. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this is a system reserved claim. */
    reserved?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ClaimValueType;
}

export class ClaimTypeInfoResultSet implements IClaimTypeInfoResultSet {
    count?: number;
    items?: ClaimTypeInfo[] | undefined;

    constructor(data?: IClaimTypeInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ClaimTypeInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClaimTypeInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimTypeInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IClaimTypeInfoResultSet {
    count?: number;
    items?: ClaimTypeInfo[] | undefined;
}

export enum ClaimValueType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

/** Models a system client. */
export class ClientInfo implements IClientInfo {
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;

    constructor(data?: IClientInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.requireConsent = _data["requireConsent"];
            this.allowRememberConsent = _data["allowRememberConsent"];
            this.logoUri = _data["logoUri"];
            this.clientUri = _data["clientUri"];
            this.nonEditable = _data["nonEditable"];
        }
    }

    static fromJS(data: any): ClientInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ClientInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["requireConsent"] = this.requireConsent;
        data["allowRememberConsent"] = this.allowRememberConsent;
        data["logoUri"] = this.logoUri;
        data["clientUri"] = this.clientUri;
        data["nonEditable"] = this.nonEditable;
        return data;
    }
}

/** Models a system client. */
export interface IClientInfo {
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;
}

export class ClientInfoResultSet implements IClientInfoResultSet {
    count?: number;
    items?: ClientInfo[] | undefined;

    constructor(data?: IClientInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ClientInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClientInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ClientInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IClientInfoResultSet {
    count?: number;
    items?: ClientInfo[] | undefined;
}

/** Models an Client secret used in flows that require this. */
export class ClientSecretInfo implements IClientSecretInfo {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    /** The type of client secret. */
    type?: string | undefined;
    /** The identifier for the API secret. */
    id?: number;
    /** Indicates if the secret is expired. */
    readonly isExpired?: boolean;

    constructor(data?: IClientSecretInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.value = _data["value"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.id = _data["id"];
            (<any>this).isExpired = _data["isExpired"];
        }
    }

    static fromJS(data: any): ClientSecretInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ClientSecretInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["value"] = this.value;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["id"] = this.id;
        data["isExpired"] = this.isExpired;
        return data;
    }
}

/** Models an Client secret used in flows that require this. */
export interface IClientSecretInfo {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    /** The type of client secret. */
    type?: string | undefined;
    /** The identifier for the API secret. */
    id?: number;
    /** Indicates if the secret is expired. */
    isExpired?: boolean;
}

/** Identity Server UI configuration for the specified client. */
export class ClientThemeConfigRequest implements IClientThemeConfigRequest {
    /** The URL of the background image. */
    backgroundImage?: string | undefined;
    /** The background color. */
    accentColor?: string | undefined;
    /** A primary color. */
    primaryColor?: string | undefined;
    /** A secondary color. */
    secondaryColor?: string | undefined;

    constructor(data?: IClientThemeConfigRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.backgroundImage = _data["backgroundImage"];
            this.accentColor = _data["accentColor"];
            this.primaryColor = _data["primaryColor"];
            this.secondaryColor = _data["secondaryColor"];
        }
    }

    static fromJS(data: any): ClientThemeConfigRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ClientThemeConfigRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["backgroundImage"] = this.backgroundImage;
        data["accentColor"] = this.accentColor;
        data["primaryColor"] = this.primaryColor;
        data["secondaryColor"] = this.secondaryColor;
        return data;
    }
}

/** Identity Server UI configuration for the specified client. */
export interface IClientThemeConfigRequest {
    /** The URL of the background image. */
    backgroundImage?: string | undefined;
    /** The background color. */
    accentColor?: string | undefined;
    /** A primary color. */
    primaryColor?: string | undefined;
    /** A secondary color. */
    secondaryColor?: string | undefined;
}

/** Identity Server UI configuration for the specified client. */
export class ClientThemeConfigResponse implements IClientThemeConfigResponse {
    /** JSON schema describing the properties to configure for the UI. */
    schema?: any | undefined;
    data?: DefaultClientThemeConfig;

    constructor(data?: IClientThemeConfigResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.schema = _data["schema"];
            this.data = _data["data"] ? DefaultClientThemeConfig.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientThemeConfigResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClientThemeConfigResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schema"] = this.schema;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Identity Server UI configuration for the specified client. */
export interface IClientThemeConfigResponse {
    /** JSON schema describing the properties to configure for the UI. */
    schema?: any | undefined;
    data?: DefaultClientThemeConfig;
}

/** Translation object for type Indice.Features.Identity.Server.Manager.Models.SingleClientInfo. */
export class ClientTranslation implements IClientTranslation {
    /** The name of the client. */
    clientName?: string | undefined;
    /** The description of the client. */
    description?: string | undefined;

    constructor(data?: IClientTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientName = _data["clientName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): ClientTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new ClientTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        return data;
    }
}

/** Translation object for type Indice.Features.Identity.Server.Manager.Models.SingleClientInfo. */
export interface IClientTranslation {
    /** The name of the client. */
    clientName?: string | undefined;
    /** The description of the client. */
    description?: string | undefined;
}

/** Models an OAuth client type. */
export enum ClientType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

/** Models the request of a user for email confirmation. */
export class ConfirmEmailRequest implements IConfirmEmailRequest {
    /** The token. */
    token!: string;

    constructor(data?: IConfirmEmailRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): ConfirmEmailRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ConfirmEmailRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

/** Models the request of a user for email confirmation. */
export interface IConfirmEmailRequest {
    /** The token. */
    token: string;
}

/** Models the request of a user for phone number confirmation. */
export class ConfirmPhoneNumberRequest implements IConfirmPhoneNumberRequest {
    /** The OTP token. */
    token!: string;

    constructor(data?: IConfirmPhoneNumberRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): ConfirmPhoneNumberRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ConfirmPhoneNumberRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

/** Models the request of a user for phone number confirmation. */
export interface IConfirmPhoneNumberRequest {
    /** The OTP token. */
    token: string;
}

/** Models an API scope that will be created on the server. */
export class CreateApiScopeRequest implements ICreateApiScopeRequest {
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
    /** The unique name of the resource. */
    name?: string | undefined;
    /** List of allowed signing algorithms for access token. If empty, will use the server default signing algorithm. */
    allowedAccessTokenSigningAlgorithms?: string | undefined;
    /** List of associated user claims that should be included when this resource is requested. */
    userClaims?: string[] | undefined;
    /** Translations. */
    translations?: { [key: string]: ApiScopeTranslation; } | undefined;
    /** Determines whether this scope is required or not. */
    required?: boolean;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;

    constructor(data?: ICreateApiScopeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.name = _data["name"];
            this.allowedAccessTokenSigningAlgorithms = _data["allowedAccessTokenSigningAlgorithms"];
            if (Array.isArray(_data["userClaims"])) {
                this.userClaims = [] as any;
                for (let item of _data["userClaims"])
                    this.userClaims!.push(item);
            }
            if (_data["translations"]) {
                this.translations = {} as any;
                for (let key in _data["translations"]) {
                    if (_data["translations"].hasOwnProperty(key))
                        (<any>this.translations)![key] = _data["translations"][key] ? ApiScopeTranslation.fromJS(_data["translations"][key]) : new ApiScopeTranslation();
                }
            }
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
        }
    }

    static fromJS(data: any): CreateApiScopeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateApiScopeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["name"] = this.name;
        data["allowedAccessTokenSigningAlgorithms"] = this.allowedAccessTokenSigningAlgorithms;
        if (Array.isArray(this.userClaims)) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item);
        }
        if (this.translations) {
            data["translations"] = {};
            for (let key in this.translations) {
                if (this.translations.hasOwnProperty(key))
                    (<any>data["translations"])[key] = this.translations[key] ? this.translations[key].toJSON() : <any>undefined;
            }
        }
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        return data;
    }
}

/** Models an API scope that will be created on the server. */
export interface ICreateApiScopeRequest {
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
    /** The unique name of the resource. */
    name?: string | undefined;
    /** List of allowed signing algorithms for access token. If empty, will use the server default signing algorithm. */
    allowedAccessTokenSigningAlgorithms?: string | undefined;
    /** List of associated user claims that should be included when this resource is requested. */
    userClaims?: string[] | undefined;
    /** Translations. */
    translations?: { [key: string]: ApiScopeTranslation; } | undefined;
    /** Determines whether this scope is required or not. */
    required?: boolean;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
}

/** Models an application setting persisted in the database. */
export class CreateAppSettingRequest implements ICreateAppSettingRequest {
    /** The key of application setting. */
    key!: string;
    /** The value of application setting. */
    value!: string;

    constructor(data?: ICreateAppSettingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): CreateAppSettingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAppSettingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

/** Models an application setting persisted in the database. */
export interface ICreateAppSettingRequest {
    /** The key of application setting. */
    key: string;
    /** The value of application setting. */
    value: string;
}

/** Models a request to create a claim for an entity (e.x user or client). */
export class CreateClaimRequest implements ICreateClaimRequest {
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;

    constructor(data?: ICreateClaimRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): CreateClaimRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClaimRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["value"] = this.value;
        return data;
    }
}

/** Models a request to create a claim for an entity (e.x user or client). */
export interface ICreateClaimRequest {
    /** The type of the claim. */
    type?: string | undefined;
    /** The value of the claim. */
    value?: string | undefined;
}

/** Models a claim type that will be created on the server. */
export class CreateClaimTypeRequest implements ICreateClaimTypeRequest {
    /** The name. */
    name!: string;
    /** The name used for display purposes. If not set, Indice.Features.Identity.Server.Manager.Models.CreateClaimTypeRequest.Name is used. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ClaimValueType;

    constructor(data?: ICreateClaimTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.required = _data["required"];
            this.userEditable = _data["userEditable"];
            this.rule = _data["rule"];
            this.valueType = _data["valueType"];
        }
    }

    static fromJS(data: any): CreateClaimTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClaimTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["required"] = this.required;
        data["userEditable"] = this.userEditable;
        data["rule"] = this.rule;
        data["valueType"] = this.valueType;
        return data;
    }
}

/** Models a claim type that will be created on the server. */
export interface ICreateClaimTypeRequest {
    /** The name. */
    name: string;
    /** The name used for display purposes. If not set, Indice.Features.Identity.Server.Manager.Models.CreateClaimTypeRequest.Name is used. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ClaimValueType;
}

/** Models a client that will be created on the server. */
export class CreateClientRequest implements ICreateClientRequest {
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean;
    /** Translations. */
    translations?: { [key: string]: ClientTranslation; } | undefined;
    clientType?: ClientType;
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Allowed URL to return after logging in. */
    redirectUri?: string | undefined;
    /** Allowed URL to return after logout. */
    postLogoutRedirectUri?: string | undefined;
    /** The client secrets. */
    secrets?: CreateSecretRequest[] | undefined;
    /** The list of identity resources allowed by the client. */
    identityResources?: string[] | undefined;
    /** The list of API resources allowed by the client. */
    apiResources?: string[] | undefined;

    constructor(data?: ICreateClientRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientName = _data["clientName"];
            this.clientUri = _data["clientUri"];
            this.logoUri = _data["logoUri"];
            this.description = _data["description"];
            this.requireConsent = _data["requireConsent"];
            if (_data["translations"]) {
                this.translations = {} as any;
                for (let key in _data["translations"]) {
                    if (_data["translations"].hasOwnProperty(key))
                        (<any>this.translations)![key] = _data["translations"][key] ? ClientTranslation.fromJS(_data["translations"][key]) : new ClientTranslation();
                }
            }
            this.clientType = _data["clientType"];
            this.clientId = _data["clientId"];
            this.redirectUri = _data["redirectUri"];
            this.postLogoutRedirectUri = _data["postLogoutRedirectUri"];
            if (Array.isArray(_data["secrets"])) {
                this.secrets = [] as any;
                for (let item of _data["secrets"])
                    this.secrets!.push(CreateSecretRequest.fromJS(item));
            }
            if (Array.isArray(_data["identityResources"])) {
                this.identityResources = [] as any;
                for (let item of _data["identityResources"])
                    this.identityResources!.push(item);
            }
            if (Array.isArray(_data["apiResources"])) {
                this.apiResources = [] as any;
                for (let item of _data["apiResources"])
                    this.apiResources!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateClientRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClientRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientName"] = this.clientName;
        data["clientUri"] = this.clientUri;
        data["logoUri"] = this.logoUri;
        data["description"] = this.description;
        data["requireConsent"] = this.requireConsent;
        if (this.translations) {
            data["translations"] = {};
            for (let key in this.translations) {
                if (this.translations.hasOwnProperty(key))
                    (<any>data["translations"])[key] = this.translations[key] ? this.translations[key].toJSON() : <any>undefined;
            }
        }
        data["clientType"] = this.clientType;
        data["clientId"] = this.clientId;
        data["redirectUri"] = this.redirectUri;
        data["postLogoutRedirectUri"] = this.postLogoutRedirectUri;
        if (Array.isArray(this.secrets)) {
            data["secrets"] = [];
            for (let item of this.secrets)
                data["secrets"].push(item.toJSON());
        }
        if (Array.isArray(this.identityResources)) {
            data["identityResources"] = [];
            for (let item of this.identityResources)
                data["identityResources"].push(item);
        }
        if (Array.isArray(this.apiResources)) {
            data["apiResources"] = [];
            for (let item of this.apiResources)
                data["apiResources"].push(item);
        }
        return data;
    }
}

/** Models a client that will be created on the server. */
export interface ICreateClientRequest {
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean;
    /** Translations. */
    translations?: { [key: string]: ClientTranslation; } | undefined;
    clientType?: ClientType;
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Allowed URL to return after logging in. */
    redirectUri?: string | undefined;
    /** Allowed URL to return after logout. */
    postLogoutRedirectUri?: string | undefined;
    /** The client secrets. */
    secrets?: CreateSecretRequest[] | undefined;
    /** The list of identity resources allowed by the client. */
    identityResources?: string[] | undefined;
    /** The list of API resources allowed by the client. */
    apiResources?: string[] | undefined;
}

/** Models a resource (API or identity) that will be created on the server. */
export class CreateResourceRequest implements ICreateResourceRequest {
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
    /** The unique name of the resource. */
    name?: string | undefined;
    /** List of allowed signing algorithms for access token. If empty, will use the server default signing algorithm. */
    allowedAccessTokenSigningAlgorithms?: string | undefined;
    /** List of associated user claims that should be included when this resource is requested. */
    userClaims?: string[] | undefined;
    /** Translations. */
    translations?: { [key: string]: ApiScopeTranslation; } | undefined;

    constructor(data?: ICreateResourceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.name = _data["name"];
            this.allowedAccessTokenSigningAlgorithms = _data["allowedAccessTokenSigningAlgorithms"];
            if (Array.isArray(_data["userClaims"])) {
                this.userClaims = [] as any;
                for (let item of _data["userClaims"])
                    this.userClaims!.push(item);
            }
            if (_data["translations"]) {
                this.translations = {} as any;
                for (let key in _data["translations"]) {
                    if (_data["translations"].hasOwnProperty(key))
                        (<any>this.translations)![key] = _data["translations"][key] ? ApiScopeTranslation.fromJS(_data["translations"][key]) : new ApiScopeTranslation();
                }
            }
        }
    }

    static fromJS(data: any): CreateResourceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateResourceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["name"] = this.name;
        data["allowedAccessTokenSigningAlgorithms"] = this.allowedAccessTokenSigningAlgorithms;
        if (Array.isArray(this.userClaims)) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item);
        }
        if (this.translations) {
            data["translations"] = {};
            for (let key in this.translations) {
                if (this.translations.hasOwnProperty(key))
                    (<any>data["translations"])[key] = this.translations[key] ? this.translations[key].toJSON() : <any>undefined;
            }
        }
        return data;
    }
}

/** Models a resource (API or identity) that will be created on the server. */
export interface ICreateResourceRequest {
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
    /** The unique name of the resource. */
    name?: string | undefined;
    /** List of allowed signing algorithms for access token. If empty, will use the server default signing algorithm. */
    allowedAccessTokenSigningAlgorithms?: string | undefined;
    /** List of associated user claims that should be included when this resource is requested. */
    userClaims?: string[] | undefined;
    /** Translations. */
    translations?: { [key: string]: ApiScopeTranslation; } | undefined;
}

/** Models a role that will be created on the server. */
export class CreateRoleRequest implements ICreateRoleRequest {
    /** The name of the role. */
    name!: string;
    /** A description for the role. */
    description?: string | undefined;

    constructor(data?: ICreateRoleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateRoleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

/** Models a role that will be created on the server. */
export interface ICreateRoleRequest {
    /** The name of the role. */
    name: string;
    /** A description for the role. */
    description?: string | undefined;
}

/** Models a client or API secret that will be created on the server. */
export class CreateSecretRequest implements ICreateSecretRequest {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;

    constructor(data?: ICreateSecretRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.value = _data["value"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateSecretRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSecretRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["value"] = this.value;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        return data;
    }
}

/** Models a client or API secret that will be created on the server. */
export interface ICreateSecretRequest {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
}

/** Models a new user that will be created on the server. */
export class CreateUserRequest implements ICreateUserRequest {
    /** The first name of the user. */
    firstName?: string | undefined;
    /** The last name of the user. */
    lastName?: string | undefined;
    /** The username used to login. */
    userName!: string;
    /** The email of the user. */
    email?: string | undefined;
    /** The initial password of the user. */
    password?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    passwordExpirationPolicy?: PasswordExpirationPolicy;
    /** Forces the user to change his password after created by the system admin. */
    changePasswordAfterFirstSignIn?: boolean | undefined;
    /** Bypasses all password validation rules. */
    bypassPasswordValidation?: boolean | undefined;
    /** Dynamic claims that have been marked as required. */
    claims?: BasicClaimInfo[] | undefined;

    constructor(data?: ICreateUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.phoneNumber = _data["phoneNumber"];
            this.passwordExpirationPolicy = _data["passwordExpirationPolicy"];
            this.changePasswordAfterFirstSignIn = _data["changePasswordAfterFirstSignIn"];
            this.bypassPasswordValidation = _data["bypassPasswordValidation"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(BasicClaimInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phoneNumber"] = this.phoneNumber;
        data["passwordExpirationPolicy"] = this.passwordExpirationPolicy;
        data["changePasswordAfterFirstSignIn"] = this.changePasswordAfterFirstSignIn;
        data["bypassPasswordValidation"] = this.bypassPasswordValidation;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        return data;
    }
}

/** Models a new user that will be created on the server. */
export interface ICreateUserRequest {
    /** The first name of the user. */
    firstName?: string | undefined;
    /** The last name of the user. */
    lastName?: string | undefined;
    /** The username used to login. */
    userName: string;
    /** The email of the user. */
    email?: string | undefined;
    /** The initial password of the user. */
    password?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    passwordExpirationPolicy?: PasswordExpirationPolicy;
    /** Forces the user to change his password after created by the system admin. */
    changePasswordAfterFirstSignIn?: boolean | undefined;
    /** Bypasses all password validation rules. */
    bypassPasswordValidation?: boolean | undefined;
    /** Dynamic claims that have been marked as required. */
    claims?: BasicClaimInfo[] | undefined;
}

/** Models the result of validating a user's credentials. */
export class CredentialsValidationInfo implements ICredentialsValidationInfo {
    /** Contains the results of checking various password validation rules. */
    passwordRules?: PasswordRuleInfo[] | undefined;

    constructor(data?: ICredentialsValidationInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["passwordRules"])) {
                this.passwordRules = [] as any;
                for (let item of _data["passwordRules"])
                    this.passwordRules!.push(PasswordRuleInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CredentialsValidationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CredentialsValidationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.passwordRules)) {
            data["passwordRules"] = [];
            for (let item of this.passwordRules)
                data["passwordRules"].push(item.toJSON());
        }
        return data;
    }
}

/** Models the result of validating a user's credentials. */
export interface ICredentialsValidationInfo {
    /** Contains the results of checking various password validation rules. */
    passwordRules?: PasswordRuleInfo[] | undefined;
}

export class DefaultClientThemeConfig implements IDefaultClientThemeConfig {
    backgroundImage?: string | undefined;
    accentColor?: string | undefined;
    primaryColor?: string | undefined;
    secondaryColor?: string | undefined;

    constructor(data?: IDefaultClientThemeConfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.backgroundImage = _data["backgroundImage"];
            this.accentColor = _data["accentColor"];
            this.primaryColor = _data["primaryColor"];
            this.secondaryColor = _data["secondaryColor"];
        }
    }

    static fromJS(data: any): DefaultClientThemeConfig {
        data = typeof data === 'object' ? data : {};
        let result = new DefaultClientThemeConfig();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["backgroundImage"] = this.backgroundImage;
        data["accentColor"] = this.accentColor;
        data["primaryColor"] = this.primaryColor;
        data["secondaryColor"] = this.secondaryColor;
        return data;
    }
}

export interface IDefaultClientThemeConfig {
    backgroundImage?: string | undefined;
    accentColor?: string | undefined;
    primaryColor?: string | undefined;
    secondaryColor?: string | undefined;
}

export enum DeviceClientType {
    _0 = 0,
    _1 = 1,
}

/** Models a user device. */
export class DeviceInfo implements IDeviceInfo {
    /** Device id. */
    deviceId?: string | undefined;
    platform?: DevicePlatform;
    /** Device name. */
    name?: string | undefined;
    /** Device model. */
    model?: string | undefined;
    /** Device OS version. */
    osVersion?: string | undefined;
    /** The date this device was created. */
    dateCreated?: Date;
    /** Gets or sets the date and time, in UTC, when the device last signed in. */
    lastSignInDate?: Date | undefined;
    /** Flag that determines if push notifications are enabled for this device. */
    isPushNotificationsEnabled?: boolean;
    /** Flag for pin support. */
    supportsPinLogin?: boolean;
    /** Flag for fingerprint support. */
    supportsFingerprintLogin?: boolean;
    /** Indicates whether the device is blocked. */
    requiresPassword?: boolean;
    /** The date that the device can be activated for trust. */
    trustActivationDate?: Date | undefined;
    /** Indicates whether the device is a trusted device (i.e. capable of strong customer authentication scenarios). */
    isTrusted?: boolean;
    /** Indicates whether the user can activate device trust after waiting for the specified delay. */
    readonly canActivateDeviceTrust?: boolean;
    /** Extra metadata for the device. */
    data?: any | undefined;
    clientType?: DeviceClientType;

    constructor(data?: IDeviceInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.platform = _data["platform"];
            this.name = _data["name"];
            this.model = _data["model"];
            this.osVersion = _data["osVersion"];
            this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : <any>undefined;
            this.lastSignInDate = _data["lastSignInDate"] ? new Date(_data["lastSignInDate"].toString()) : <any>undefined;
            this.isPushNotificationsEnabled = _data["isPushNotificationsEnabled"];
            this.supportsPinLogin = _data["supportsPinLogin"];
            this.supportsFingerprintLogin = _data["supportsFingerprintLogin"];
            this.requiresPassword = _data["requiresPassword"];
            this.trustActivationDate = _data["trustActivationDate"] ? new Date(_data["trustActivationDate"].toString()) : <any>undefined;
            this.isTrusted = _data["isTrusted"];
            (<any>this).canActivateDeviceTrust = _data["canActivateDeviceTrust"];
            this.data = _data["data"];
            this.clientType = _data["clientType"];
        }
    }

    static fromJS(data: any): DeviceInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["platform"] = this.platform;
        data["name"] = this.name;
        data["model"] = this.model;
        data["osVersion"] = this.osVersion;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
        data["lastSignInDate"] = this.lastSignInDate ? this.lastSignInDate.toISOString() : <any>undefined;
        data["isPushNotificationsEnabled"] = this.isPushNotificationsEnabled;
        data["supportsPinLogin"] = this.supportsPinLogin;
        data["supportsFingerprintLogin"] = this.supportsFingerprintLogin;
        data["requiresPassword"] = this.requiresPassword;
        data["trustActivationDate"] = this.trustActivationDate ? this.trustActivationDate.toISOString() : <any>undefined;
        data["isTrusted"] = this.isTrusted;
        data["canActivateDeviceTrust"] = this.canActivateDeviceTrust;
        data["data"] = this.data;
        data["clientType"] = this.clientType;
        return data;
    }
}

/** Models a user device. */
export interface IDeviceInfo {
    /** Device id. */
    deviceId?: string | undefined;
    platform?: DevicePlatform;
    /** Device name. */
    name?: string | undefined;
    /** Device model. */
    model?: string | undefined;
    /** Device OS version. */
    osVersion?: string | undefined;
    /** The date this device was created. */
    dateCreated?: Date;
    /** Gets or sets the date and time, in UTC, when the device last signed in. */
    lastSignInDate?: Date | undefined;
    /** Flag that determines if push notifications are enabled for this device. */
    isPushNotificationsEnabled?: boolean;
    /** Flag for pin support. */
    supportsPinLogin?: boolean;
    /** Flag for fingerprint support. */
    supportsFingerprintLogin?: boolean;
    /** Indicates whether the device is blocked. */
    requiresPassword?: boolean;
    /** The date that the device can be activated for trust. */
    trustActivationDate?: Date | undefined;
    /** Indicates whether the device is a trusted device (i.e. capable of strong customer authentication scenarios). */
    isTrusted?: boolean;
    /** Indicates whether the user can activate device trust after waiting for the specified delay. */
    canActivateDeviceTrust?: boolean;
    /** Extra metadata for the device. */
    data?: any | undefined;
    clientType?: DeviceClientType;
}

export class DeviceInfoResultSet implements IDeviceInfoResultSet {
    count?: number;
    items?: DeviceInfo[] | undefined;

    constructor(data?: IDeviceInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DeviceInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeviceInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDeviceInfoResultSet {
    count?: number;
    items?: DeviceInfo[] | undefined;
}

export enum DevicePlatform {
    _0 = 0,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

/** the external provider model */
export class ExternalProvider implements IExternalProvider {
    /** The display name */
    displayName?: string | undefined;
    /** The authentication scheme for the cookie */
    authenticationScheme?: string | undefined;

    constructor(data?: IExternalProvider) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.authenticationScheme = _data["authenticationScheme"];
        }
    }

    static fromJS(data: any): ExternalProvider {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalProvider();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["authenticationScheme"] = this.authenticationScheme;
        return data;
    }
}

/** the external provider model */
export interface IExternalProvider {
    /** The display name */
    displayName?: string | undefined;
    /** The authentication scheme for the cookie */
    authenticationScheme?: string | undefined;
}

export class ExternalProviderResultSet implements IExternalProviderResultSet {
    count?: number;
    items?: ExternalProvider[] | undefined;

    constructor(data?: IExternalProviderResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ExternalProvider.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExternalProviderResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalProviderResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IExternalProviderResultSet {
    count?: number;
    items?: ExternalProvider[] | undefined;
}

/** Completes the password reset process. Maybe we need to retire one of them. They only differ by their use of the Email or username fields for user retrieval. */
export class ForgotPasswordConfirmationRequest implements IForgotPasswordConfirmationRequest {
    /** The token. */
    token?: string | undefined;
    /** The user's email. */
    email?: string | undefined;
    /** The new password. */
    newPassword?: string | undefined;
    /** The new password confirmed (optional). */
    newPasswordConfirmation?: string | undefined;
    /** The url to return to. */
    returnUrl?: string | undefined;

    constructor(data?: IForgotPasswordConfirmationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.email = _data["email"];
            this.newPassword = _data["newPassword"];
            this.newPasswordConfirmation = _data["newPasswordConfirmation"];
            this.returnUrl = _data["returnUrl"];
        }
    }

    static fromJS(data: any): ForgotPasswordConfirmationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordConfirmationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["email"] = this.email;
        data["newPassword"] = this.newPassword;
        data["newPasswordConfirmation"] = this.newPasswordConfirmation;
        data["returnUrl"] = this.returnUrl;
        return data;
    }
}

/** Completes the password reset process. Maybe we need to retire one of them. They only differ by their use of the Email or username fields for user retrieval. */
export interface IForgotPasswordConfirmationRequest {
    /** The token. */
    token?: string | undefined;
    /** The user's email. */
    email?: string | undefined;
    /** The new password. */
    newPassword?: string | undefined;
    /** The new password confirmed (optional). */
    newPasswordConfirmation?: string | undefined;
    /** The url to return to. */
    returnUrl?: string | undefined;
}

/** Triggers the initiation for a password reset. */
export class ForgotPasswordRequest implements IForgotPasswordRequest {
    /** The user's email. */
    email?: string | undefined;
    /** The url to return to. */
    returnUrl?: string | undefined;

    constructor(data?: IForgotPasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.returnUrl = _data["returnUrl"];
        }
    }

    static fromJS(data: any): ForgotPasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["returnUrl"] = this.returnUrl;
        return data;
    }
}

/** Triggers the initiation for a password reset. */
export interface IForgotPasswordRequest {
    /** The user's email. */
    email?: string | undefined;
    /** The url to return to. */
    returnUrl?: string | undefined;
}

/** Describes the grant type of a client in the database. */
export class GrantTypeInfo implements IGrantTypeInfo {
    /** The id of the grant type in the system. */
    id?: number;
    /** The name of the grant type. */
    name?: string | undefined;

    constructor(data?: IGrantTypeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GrantTypeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new GrantTypeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

/** Describes the grant type of a client in the database. */
export interface IGrantTypeInfo {
    /** The id of the grant type in the system. */
    id?: number;
    /** The name of the grant type. */
    name?: string | undefined;
}

export class HttpValidationProblemDetails implements IHttpValidationProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    readonly errors?: { [key: string]: string[]; } | undefined;

    constructor(data?: IHttpValidationProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["errors"]) {
                (<any>this).errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>(<any>this).errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): HttpValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new HttpValidationProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = (<any>this.errors)[key];
            }
        }
        return data;
    }
}

export interface IHttpValidationProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    errors?: { [key: string]: string[]; } | undefined;
}

/** Models an identity resource for the application. */
export class IdentityResourceInfo implements IIdentityResourceInfo {
    /** Unique identifier for the identity resource. */
    id?: number;
    /** The name of the resource. */
    name?: string | undefined;
    /** The display name of the resource. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this resource is enabled or not. */
    enabled?: boolean;
    /** Determines whether this resource is required or not. */
    required?: boolean;
    /** Determines whether this resource should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this resource should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
    /** Determines whether this resource is editable or not. */
    nonEditable?: boolean;
    /** List of associated claims that should be included when this resource is requested. */
    allowedClaims?: string[] | undefined;

    constructor(data?: IIdentityResourceInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            this.nonEditable = _data["nonEditable"];
            if (Array.isArray(_data["allowedClaims"])) {
                this.allowedClaims = [] as any;
                for (let item of _data["allowedClaims"])
                    this.allowedClaims!.push(item);
            }
        }
    }

    static fromJS(data: any): IdentityResourceInfo {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityResourceInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        data["nonEditable"] = this.nonEditable;
        if (Array.isArray(this.allowedClaims)) {
            data["allowedClaims"] = [];
            for (let item of this.allowedClaims)
                data["allowedClaims"].push(item);
        }
        return data;
    }
}

/** Models an identity resource for the application. */
export interface IIdentityResourceInfo {
    /** Unique identifier for the identity resource. */
    id?: number;
    /** The name of the resource. */
    name?: string | undefined;
    /** The display name of the resource. */
    displayName?: string | undefined;
    /** The description of the resource. */
    description?: string | undefined;
    /** Determines whether this resource is enabled or not. */
    enabled?: boolean;
    /** Determines whether this resource is required or not. */
    required?: boolean;
    /** Determines whether this resource should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this resource should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
    /** Determines whether this resource is editable or not. */
    nonEditable?: boolean;
    /** List of associated claims that should be included when this resource is requested. */
    allowedClaims?: string[] | undefined;
}

export class IdentityResourceInfoResultSet implements IIdentityResourceInfoResultSet {
    count?: number;
    items?: IdentityResourceInfo[] | undefined;

    constructor(data?: IIdentityResourceInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(IdentityResourceInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IdentityResourceInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityResourceInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IIdentityResourceInfoResultSet {
    count?: number;
    items?: IdentityResourceInfo[] | undefined;
}

export enum PasswordExpirationPolicy {
    _30 = 30,
    _90 = 90,
    _180 = 180,
    _365 = 365,
    _730 = 730,
    __1 = -1,
}

export class PasswordOptions implements IPasswordOptions {
    requiredLength?: number;
    requiredUniqueChars?: number;
    requireNonAlphanumeric?: boolean;
    requireLowercase?: boolean;
    requireUppercase?: boolean;
    requireDigit?: boolean;

    constructor(data?: IPasswordOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requiredLength = _data["requiredLength"];
            this.requiredUniqueChars = _data["requiredUniqueChars"];
            this.requireNonAlphanumeric = _data["requireNonAlphanumeric"];
            this.requireLowercase = _data["requireLowercase"];
            this.requireUppercase = _data["requireUppercase"];
            this.requireDigit = _data["requireDigit"];
        }
    }

    static fromJS(data: any): PasswordOptions {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requiredLength"] = this.requiredLength;
        data["requiredUniqueChars"] = this.requiredUniqueChars;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric;
        data["requireLowercase"] = this.requireLowercase;
        data["requireUppercase"] = this.requireUppercase;
        data["requireDigit"] = this.requireDigit;
        return data;
    }
}

export interface IPasswordOptions {
    requiredLength?: number;
    requiredUniqueChars?: number;
    requireNonAlphanumeric?: boolean;
    requireLowercase?: boolean;
    requireUppercase?: boolean;
    requireDigit?: boolean;
}

/** Models a password validation rule. */
export class PasswordRuleInfo implements IPasswordRuleInfo {
    /** The name of the rule checked. */
    code?: string | undefined;
    /** The rule error description. */
    description?: string | undefined;
    /** The requirement for the rule. */
    requirement?: string | undefined;
    /** Determines if rule validation was successful or not. */
    isValid?: boolean;

    constructor(data?: IPasswordRuleInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.description = _data["description"];
            this.requirement = _data["requirement"];
            this.isValid = _data["isValid"];
        }
    }

    static fromJS(data: any): PasswordRuleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordRuleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["description"] = this.description;
        data["requirement"] = this.requirement;
        data["isValid"] = this.isValid;
        return data;
    }
}

/** Models a password validation rule. */
export interface IPasswordRuleInfo {
    /** The name of the rule checked. */
    code?: string | undefined;
    /** The rule error description. */
    description?: string | undefined;
    /** The requirement for the rule. */
    requirement?: string | undefined;
    /** Determines if rule validation was successful or not. */
    isValid?: boolean;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

/** Models a new user that is registering on the system. */
export class RegisterRequest implements IRegisterRequest {
    /** The first name of the user. */
    firstName?: string | undefined;
    /** The last name of the user. */
    lastName?: string | undefined;
    /** The username used to login. */
    userName!: string;
    /** User password. */
    password!: string;
    /** User password confirmation. */
    passwordConfirmation?: string | undefined;
    /** Email. */
    email!: string;
    /** Phone number. */
    phoneNumber?: string | undefined;
    /** Privacy policy read. */
    hasReadPrivacyPolicy?: boolean;
    /** Terms read. */
    hasAcceptedTerms?: boolean;
    /** User claims. */
    claims?: BasicClaimInfo[] | undefined;

    constructor(data?: IRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.passwordConfirmation = _data["passwordConfirmation"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.hasReadPrivacyPolicy = _data["hasReadPrivacyPolicy"];
            this.hasAcceptedTerms = _data["hasAcceptedTerms"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(BasicClaimInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["passwordConfirmation"] = this.passwordConfirmation;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["hasReadPrivacyPolicy"] = this.hasReadPrivacyPolicy;
        data["hasAcceptedTerms"] = this.hasAcceptedTerms;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        return data;
    }
}

/** Models a new user that is registering on the system. */
export interface IRegisterRequest {
    /** The first name of the user. */
    firstName?: string | undefined;
    /** The last name of the user. */
    lastName?: string | undefined;
    /** The username used to login. */
    userName: string;
    /** User password. */
    password: string;
    /** User password confirmation. */
    passwordConfirmation?: string | undefined;
    /** Email. */
    email: string;
    /** Phone number. */
    phoneNumber?: string | undefined;
    /** Privacy policy read. */
    hasReadPrivacyPolicy?: boolean;
    /** Terms read. */
    hasAcceptedTerms?: boolean;
    /** User claims. */
    claims?: BasicClaimInfo[] | undefined;
}

/** Models an system role. */
export class RoleInfo implements IRoleInfo {
    /** The id of the role. */
    id?: string | undefined;
    /** The name of the role. */
    name?: string | undefined;
    /** A description for the role. */
    description?: string | undefined;

    constructor(data?: IRoleInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): RoleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RoleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

/** Models an system role. */
export interface IRoleInfo {
    /** The id of the role. */
    id?: string | undefined;
    /** The name of the role. */
    name?: string | undefined;
    /** A description for the role. */
    description?: string | undefined;
}

export class RoleInfoResultSet implements IRoleInfoResultSet {
    count?: number;
    items?: RoleInfo[] | undefined;

    constructor(data?: IRoleInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoleInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new RoleInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRoleInfoResultSet {
    count?: number;
    items?: RoleInfo[] | undefined;
}

/** Models a secret value used for a client or API. */
export class SecretInfo implements ISecretInfo {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    /** The type of client secret. */
    type?: string | undefined;
    /** The identifier for the API secret. */
    id?: number;
    /** Indicates if the secret is expired. */
    readonly isExpired?: boolean;

    constructor(data?: ISecretInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.value = _data["value"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.id = _data["id"];
            (<any>this).isExpired = _data["isExpired"];
        }
    }

    static fromJS(data: any): SecretInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SecretInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["value"] = this.value;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["id"] = this.id;
        data["isExpired"] = this.isExpired;
        return data;
    }
}

/** Models a secret value used for a client or API. */
export interface ISecretInfo {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    /** The type of client secret. */
    type?: string | undefined;
    /** The identifier for the API secret. */
    id?: number;
    /** Indicates if the secret is expired. */
    isExpired?: boolean;
}

/** Models a secret. */
export class SecretInfoBase implements ISecretInfoBase {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    /** The type of client secret. */
    type?: string | undefined;

    constructor(data?: ISecretInfoBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.value = _data["value"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): SecretInfoBase {
        data = typeof data === 'object' ? data : {};
        let result = new SecretInfoBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["value"] = this.value;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["type"] = this.type;
        return data;
    }
}

/** Models a secret. */
export interface ISecretInfoBase {
    /** Description of client secret. */
    description?: string | undefined;
    /** The value of client secret. */
    value?: string | undefined;
    /** Optional expiration of client secret. */
    expiration?: Date | undefined;
    /** The type of client secret. */
    type?: string | undefined;
}

/** Models a request to set a user's password. */
export class SetPasswordRequest implements ISetPasswordRequest {
    /** The password of the user. */
    password!: string;
    /** Forces the user to change his password after changed by the system admin. */
    changePasswordAfterFirstSignIn?: boolean | undefined;
    /** Bypasses all password validation rules. */
    bypassPasswordValidation?: boolean | undefined;

    constructor(data?: ISetPasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.password = _data["password"];
            this.changePasswordAfterFirstSignIn = _data["changePasswordAfterFirstSignIn"];
            this.bypassPasswordValidation = _data["bypassPasswordValidation"];
        }
    }

    static fromJS(data: any): SetPasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SetPasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password;
        data["changePasswordAfterFirstSignIn"] = this.changePasswordAfterFirstSignIn;
        data["bypassPasswordValidation"] = this.bypassPasswordValidation;
        return data;
    }
}

/** Models a request to set a user's password. */
export interface ISetPasswordRequest {
    /** The password of the user. */
    password: string;
    /** Forces the user to change his password after changed by the system admin. */
    changePasswordAfterFirstSignIn?: boolean | undefined;
    /** Bypasses all password validation rules. */
    bypassPasswordValidation?: boolean | undefined;
}

/** Models toggling a user's 'Blocked' property. */
export class SetUserBlockRequest implements ISetUserBlockRequest {
    /** Indicates whether the user is forcefully blocked. */
    blocked?: boolean;

    constructor(data?: ISetUserBlockRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blocked = _data["blocked"];
        }
    }

    static fromJS(data: any): SetUserBlockRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SetUserBlockRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blocked"] = this.blocked;
        return data;
    }
}

/** Models toggling a user's 'Blocked' property. */
export interface ISetUserBlockRequest {
    /** Indicates whether the user is forcefully blocked. */
    blocked?: boolean;
}

export class SignInLogEntry implements ISignInLogEntry {
    id?: string;
    createdAt?: Date;
    actionName?: string | undefined;
    applicationId?: string | undefined;
    applicationName?: string | undefined;
    subjectId?: string | undefined;
    subjectName?: string | undefined;
    resourceId?: string | undefined;
    resourceType?: string | undefined;
    description?: string | undefined;
    succeeded?: boolean;
    ipAddress?: string | undefined;
    requestId?: string | undefined;
    location?: string | undefined;
    sessionId?: string | undefined;
    signInType?: SignInType;
    review?: boolean;
    countryIsoCode?: string | undefined;
    deviceId?: string | undefined;
    grantType?: string | undefined;
    coordinates?: string | undefined;
    extraData?: any | undefined;

    constructor(data?: ISignInLogEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.actionName = _data["actionName"];
            this.applicationId = _data["applicationId"];
            this.applicationName = _data["applicationName"];
            this.subjectId = _data["subjectId"];
            this.subjectName = _data["subjectName"];
            this.resourceId = _data["resourceId"];
            this.resourceType = _data["resourceType"];
            this.description = _data["description"];
            this.succeeded = _data["succeeded"];
            this.ipAddress = _data["ipAddress"];
            this.requestId = _data["requestId"];
            this.location = _data["location"];
            this.sessionId = _data["sessionId"];
            this.signInType = _data["signInType"];
            this.review = _data["review"];
            this.countryIsoCode = _data["countryIsoCode"];
            this.deviceId = _data["deviceId"];
            this.grantType = _data["grantType"];
            this.coordinates = _data["coordinates"];
            this.extraData = _data["extraData"];
        }
    }

    static fromJS(data: any): SignInLogEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SignInLogEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["actionName"] = this.actionName;
        data["applicationId"] = this.applicationId;
        data["applicationName"] = this.applicationName;
        data["subjectId"] = this.subjectId;
        data["subjectName"] = this.subjectName;
        data["resourceId"] = this.resourceId;
        data["resourceType"] = this.resourceType;
        data["description"] = this.description;
        data["succeeded"] = this.succeeded;
        data["ipAddress"] = this.ipAddress;
        data["requestId"] = this.requestId;
        data["location"] = this.location;
        data["sessionId"] = this.sessionId;
        data["signInType"] = this.signInType;
        data["review"] = this.review;
        data["countryIsoCode"] = this.countryIsoCode;
        data["deviceId"] = this.deviceId;
        data["grantType"] = this.grantType;
        data["coordinates"] = this.coordinates;
        data["extraData"] = this.extraData;
        return data;
    }
}

export interface ISignInLogEntry {
    id?: string;
    createdAt?: Date;
    actionName?: string | undefined;
    applicationId?: string | undefined;
    applicationName?: string | undefined;
    subjectId?: string | undefined;
    subjectName?: string | undefined;
    resourceId?: string | undefined;
    resourceType?: string | undefined;
    description?: string | undefined;
    succeeded?: boolean;
    ipAddress?: string | undefined;
    requestId?: string | undefined;
    location?: string | undefined;
    sessionId?: string | undefined;
    signInType?: SignInType;
    review?: boolean;
    countryIsoCode?: string | undefined;
    deviceId?: string | undefined;
    grantType?: string | undefined;
    coordinates?: string | undefined;
    extraData?: any | undefined;
}

export class SignInLogEntryRequest implements ISignInLogEntryRequest {
    review?: boolean;
    reviewComment?: string | undefined;

    constructor(data?: ISignInLogEntryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.review = _data["review"];
            this.reviewComment = _data["reviewComment"];
        }
    }

    static fromJS(data: any): SignInLogEntryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SignInLogEntryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["review"] = this.review;
        data["reviewComment"] = this.reviewComment;
        return data;
    }
}

export interface ISignInLogEntryRequest {
    review?: boolean;
    reviewComment?: string | undefined;
}

export class SignInLogEntryResultSet implements ISignInLogEntryResultSet {
    count?: number;
    items?: SignInLogEntry[] | undefined;

    constructor(data?: ISignInLogEntryResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SignInLogEntry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SignInLogEntryResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new SignInLogEntryResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISignInLogEntryResultSet {
    count?: number;
    items?: SignInLogEntry[] | undefined;
}

export enum SignInType {
    _0 = 0,
    _1 = 1,
}

/** Models a system client when API provides info for a single client. */
export class SingleClientInfo implements ISingleClientInfo {
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;
    /** Lifetime of identity token in seconds. */
    identityTokenLifetime?: number | undefined;
    /** Lifetime of access token in seconds. */
    accessTokenLifetime?: number | undefined;
    /** Maximum lifetime of a refresh token in seconds. */
    absoluteRefreshTokenLifetime?: number | undefined;
    /** Lifetime of a user consent in seconds. */
    consentLifetime?: number | undefined;
    /** The maximum duration (in seconds) since the last time the user authenticated. */
    userSsoLifetime?: number | undefined;
    /** Specifies logout URI at client for HTTP front-channel based logout. */
    frontChannelLogoutUri?: string | undefined;
    /** Gets or sets a salt value used in pair-wise subjectId generation for users of this client. */
    pairWiseSubjectSalt?: string | undefined;
    accessTokenType?: AccessTokenType;
    refreshTokenUsage?: TokenUsage;
    refreshTokenExpiration?: TokenExpiration;
    /** Gets or sets a value indicating whether to allow offline access. */
    allowOfflineAccess?: boolean | undefined;
    /** Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request. */
    updateAccessTokenClaimsOnRefresh?: boolean | undefined;
    /** Specifies if the user's session id should be sent to the FrontChannelLogoutUri. */
    frontChannelLogoutSessionRequired?: boolean | undefined;
    /** Gets or sets a value indicating whether JWT access tokens should include an identifier. */
    includeJwtId?: boolean | undefined;
    /** Controls whether access tokens are transmitted via the browser for this client. This can prevent accidental leakage of access tokens when multiple response types are allowed. */
    allowAccessTokensViaBrowser?: boolean | undefined;
    /** When requesting both an id token and access token, should the user claims always be added to the id token instead of requiring the client to use the user-info endpoint. */
    alwaysIncludeUserClaimsInIdToken?: boolean | undefined;
    /** Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow. */
    alwaysSendClientClaims?: boolean | undefined;
    /** Lifetime of authorization code in seconds. */
    authorizationCodeLifetime?: number | undefined;
    /** Specifies whether a proof key is required for authorization code based token requests. */
    requirePkce?: boolean | undefined;
    /** Specifies whether a proof key can be sent using plain method. */
    allowPlainTextPkce?: boolean | undefined;
    /** Gets or sets a value to prefix it on client claim types. */
    clientClaimsPrefix?: string | undefined;
    /** Specifies logout URI at client for HTTP back-channel based logout. */
    backChannelLogoutUri?: string | undefined;
    /** If the user's session id should be sent to the Indice.Features.Identity.Server.Manager.Models.SingleClientInfo.FrontChannelLogoutUri. Defaults to true */
    backChannelLogoutSessionRequired?: boolean;
    /** Gets or sets the type of the device flow user code. */
    userCodeType?: string | undefined;
    /** Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days. */
    slidingRefreshTokenLifetime?: number;
    /** Gets or sets the device code lifetime. */
    deviceCodeLifetime?: number | undefined;
    /** List of client claims. */
    claims?: ClaimInfo[] | undefined;
    /** List of configured grant types. */
    grantTypes?: string[] | undefined;
    /** List of available client secrets. */
    secrets?: ClientSecretInfo[] | undefined;
    /** CORS origins allowed. */
    allowedCorsOrigins?: string[] | undefined;
    /** Allowed URIs to redirect after logout. */
    postLogoutRedirectUris?: string[] | undefined;
    /** Allowed URIs to redirect after successful login. */
    redirectUris?: string[] | undefined;
    /** The API resources that the client has access to. */
    apiResources?: string[] | undefined;
    /** The identity resources that the client has access to. */
    identityResources?: string[] | undefined;
    /** Translations. */
    translations?: { [key: string]: ClientTranslation; } | undefined;
    /** Determines whether login using a local account is allowed for this client. */
    enableLocalLogin?: boolean;
    /** List of identity providers that are not allowed for this client. */
    identityProviderRestrictions?: string[] | undefined;

    constructor(data?: ISingleClientInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.requireConsent = _data["requireConsent"];
            this.allowRememberConsent = _data["allowRememberConsent"];
            this.logoUri = _data["logoUri"];
            this.clientUri = _data["clientUri"];
            this.nonEditable = _data["nonEditable"];
            this.identityTokenLifetime = _data["identityTokenLifetime"];
            this.accessTokenLifetime = _data["accessTokenLifetime"];
            this.absoluteRefreshTokenLifetime = _data["absoluteRefreshTokenLifetime"];
            this.consentLifetime = _data["consentLifetime"];
            this.userSsoLifetime = _data["userSsoLifetime"];
            this.frontChannelLogoutUri = _data["frontChannelLogoutUri"];
            this.pairWiseSubjectSalt = _data["pairWiseSubjectSalt"];
            this.accessTokenType = _data["accessTokenType"];
            this.refreshTokenUsage = _data["refreshTokenUsage"];
            this.refreshTokenExpiration = _data["refreshTokenExpiration"];
            this.allowOfflineAccess = _data["allowOfflineAccess"];
            this.updateAccessTokenClaimsOnRefresh = _data["updateAccessTokenClaimsOnRefresh"];
            this.frontChannelLogoutSessionRequired = _data["frontChannelLogoutSessionRequired"];
            this.includeJwtId = _data["includeJwtId"];
            this.allowAccessTokensViaBrowser = _data["allowAccessTokensViaBrowser"];
            this.alwaysIncludeUserClaimsInIdToken = _data["alwaysIncludeUserClaimsInIdToken"];
            this.alwaysSendClientClaims = _data["alwaysSendClientClaims"];
            this.authorizationCodeLifetime = _data["authorizationCodeLifetime"];
            this.requirePkce = _data["requirePkce"];
            this.allowPlainTextPkce = _data["allowPlainTextPkce"];
            this.clientClaimsPrefix = _data["clientClaimsPrefix"];
            this.backChannelLogoutUri = _data["backChannelLogoutUri"];
            this.backChannelLogoutSessionRequired = _data["backChannelLogoutSessionRequired"];
            this.userCodeType = _data["userCodeType"];
            this.slidingRefreshTokenLifetime = _data["slidingRefreshTokenLifetime"];
            this.deviceCodeLifetime = _data["deviceCodeLifetime"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(ClaimInfo.fromJS(item));
            }
            if (Array.isArray(_data["grantTypes"])) {
                this.grantTypes = [] as any;
                for (let item of _data["grantTypes"])
                    this.grantTypes!.push(item);
            }
            if (Array.isArray(_data["secrets"])) {
                this.secrets = [] as any;
                for (let item of _data["secrets"])
                    this.secrets!.push(ClientSecretInfo.fromJS(item));
            }
            if (Array.isArray(_data["allowedCorsOrigins"])) {
                this.allowedCorsOrigins = [] as any;
                for (let item of _data["allowedCorsOrigins"])
                    this.allowedCorsOrigins!.push(item);
            }
            if (Array.isArray(_data["postLogoutRedirectUris"])) {
                this.postLogoutRedirectUris = [] as any;
                for (let item of _data["postLogoutRedirectUris"])
                    this.postLogoutRedirectUris!.push(item);
            }
            if (Array.isArray(_data["redirectUris"])) {
                this.redirectUris = [] as any;
                for (let item of _data["redirectUris"])
                    this.redirectUris!.push(item);
            }
            if (Array.isArray(_data["apiResources"])) {
                this.apiResources = [] as any;
                for (let item of _data["apiResources"])
                    this.apiResources!.push(item);
            }
            if (Array.isArray(_data["identityResources"])) {
                this.identityResources = [] as any;
                for (let item of _data["identityResources"])
                    this.identityResources!.push(item);
            }
            if (_data["translations"]) {
                this.translations = {} as any;
                for (let key in _data["translations"]) {
                    if (_data["translations"].hasOwnProperty(key))
                        (<any>this.translations)![key] = _data["translations"][key] ? ClientTranslation.fromJS(_data["translations"][key]) : new ClientTranslation();
                }
            }
            this.enableLocalLogin = _data["enableLocalLogin"];
            if (Array.isArray(_data["identityProviderRestrictions"])) {
                this.identityProviderRestrictions = [] as any;
                for (let item of _data["identityProviderRestrictions"])
                    this.identityProviderRestrictions!.push(item);
            }
        }
    }

    static fromJS(data: any): SingleClientInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SingleClientInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["requireConsent"] = this.requireConsent;
        data["allowRememberConsent"] = this.allowRememberConsent;
        data["logoUri"] = this.logoUri;
        data["clientUri"] = this.clientUri;
        data["nonEditable"] = this.nonEditable;
        data["identityTokenLifetime"] = this.identityTokenLifetime;
        data["accessTokenLifetime"] = this.accessTokenLifetime;
        data["absoluteRefreshTokenLifetime"] = this.absoluteRefreshTokenLifetime;
        data["consentLifetime"] = this.consentLifetime;
        data["userSsoLifetime"] = this.userSsoLifetime;
        data["frontChannelLogoutUri"] = this.frontChannelLogoutUri;
        data["pairWiseSubjectSalt"] = this.pairWiseSubjectSalt;
        data["accessTokenType"] = this.accessTokenType;
        data["refreshTokenUsage"] = this.refreshTokenUsage;
        data["refreshTokenExpiration"] = this.refreshTokenExpiration;
        data["allowOfflineAccess"] = this.allowOfflineAccess;
        data["updateAccessTokenClaimsOnRefresh"] = this.updateAccessTokenClaimsOnRefresh;
        data["frontChannelLogoutSessionRequired"] = this.frontChannelLogoutSessionRequired;
        data["includeJwtId"] = this.includeJwtId;
        data["allowAccessTokensViaBrowser"] = this.allowAccessTokensViaBrowser;
        data["alwaysIncludeUserClaimsInIdToken"] = this.alwaysIncludeUserClaimsInIdToken;
        data["alwaysSendClientClaims"] = this.alwaysSendClientClaims;
        data["authorizationCodeLifetime"] = this.authorizationCodeLifetime;
        data["requirePkce"] = this.requirePkce;
        data["allowPlainTextPkce"] = this.allowPlainTextPkce;
        data["clientClaimsPrefix"] = this.clientClaimsPrefix;
        data["backChannelLogoutUri"] = this.backChannelLogoutUri;
        data["backChannelLogoutSessionRequired"] = this.backChannelLogoutSessionRequired;
        data["userCodeType"] = this.userCodeType;
        data["slidingRefreshTokenLifetime"] = this.slidingRefreshTokenLifetime;
        data["deviceCodeLifetime"] = this.deviceCodeLifetime;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        if (Array.isArray(this.grantTypes)) {
            data["grantTypes"] = [];
            for (let item of this.grantTypes)
                data["grantTypes"].push(item);
        }
        if (Array.isArray(this.secrets)) {
            data["secrets"] = [];
            for (let item of this.secrets)
                data["secrets"].push(item.toJSON());
        }
        if (Array.isArray(this.allowedCorsOrigins)) {
            data["allowedCorsOrigins"] = [];
            for (let item of this.allowedCorsOrigins)
                data["allowedCorsOrigins"].push(item);
        }
        if (Array.isArray(this.postLogoutRedirectUris)) {
            data["postLogoutRedirectUris"] = [];
            for (let item of this.postLogoutRedirectUris)
                data["postLogoutRedirectUris"].push(item);
        }
        if (Array.isArray(this.redirectUris)) {
            data["redirectUris"] = [];
            for (let item of this.redirectUris)
                data["redirectUris"].push(item);
        }
        if (Array.isArray(this.apiResources)) {
            data["apiResources"] = [];
            for (let item of this.apiResources)
                data["apiResources"].push(item);
        }
        if (Array.isArray(this.identityResources)) {
            data["identityResources"] = [];
            for (let item of this.identityResources)
                data["identityResources"].push(item);
        }
        if (this.translations) {
            data["translations"] = {};
            for (let key in this.translations) {
                if (this.translations.hasOwnProperty(key))
                    (<any>data["translations"])[key] = this.translations[key] ? this.translations[key].toJSON() : <any>undefined;
            }
        }
        data["enableLocalLogin"] = this.enableLocalLogin;
        if (Array.isArray(this.identityProviderRestrictions)) {
            data["identityProviderRestrictions"] = [];
            for (let item of this.identityProviderRestrictions)
                data["identityProviderRestrictions"].push(item);
        }
        return data;
    }
}

/** Models a system client when API provides info for a single client. */
export interface ISingleClientInfo {
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;
    /** Lifetime of identity token in seconds. */
    identityTokenLifetime?: number | undefined;
    /** Lifetime of access token in seconds. */
    accessTokenLifetime?: number | undefined;
    /** Maximum lifetime of a refresh token in seconds. */
    absoluteRefreshTokenLifetime?: number | undefined;
    /** Lifetime of a user consent in seconds. */
    consentLifetime?: number | undefined;
    /** The maximum duration (in seconds) since the last time the user authenticated. */
    userSsoLifetime?: number | undefined;
    /** Specifies logout URI at client for HTTP front-channel based logout. */
    frontChannelLogoutUri?: string | undefined;
    /** Gets or sets a salt value used in pair-wise subjectId generation for users of this client. */
    pairWiseSubjectSalt?: string | undefined;
    accessTokenType?: AccessTokenType;
    refreshTokenUsage?: TokenUsage;
    refreshTokenExpiration?: TokenExpiration;
    /** Gets or sets a value indicating whether to allow offline access. */
    allowOfflineAccess?: boolean | undefined;
    /** Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request. */
    updateAccessTokenClaimsOnRefresh?: boolean | undefined;
    /** Specifies if the user's session id should be sent to the FrontChannelLogoutUri. */
    frontChannelLogoutSessionRequired?: boolean | undefined;
    /** Gets or sets a value indicating whether JWT access tokens should include an identifier. */
    includeJwtId?: boolean | undefined;
    /** Controls whether access tokens are transmitted via the browser for this client. This can prevent accidental leakage of access tokens when multiple response types are allowed. */
    allowAccessTokensViaBrowser?: boolean | undefined;
    /** When requesting both an id token and access token, should the user claims always be added to the id token instead of requiring the client to use the user-info endpoint. */
    alwaysIncludeUserClaimsInIdToken?: boolean | undefined;
    /** Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow. */
    alwaysSendClientClaims?: boolean | undefined;
    /** Lifetime of authorization code in seconds. */
    authorizationCodeLifetime?: number | undefined;
    /** Specifies whether a proof key is required for authorization code based token requests. */
    requirePkce?: boolean | undefined;
    /** Specifies whether a proof key can be sent using plain method. */
    allowPlainTextPkce?: boolean | undefined;
    /** Gets or sets a value to prefix it on client claim types. */
    clientClaimsPrefix?: string | undefined;
    /** Specifies logout URI at client for HTTP back-channel based logout. */
    backChannelLogoutUri?: string | undefined;
    /** If the user's session id should be sent to the Indice.Features.Identity.Server.Manager.Models.SingleClientInfo.FrontChannelLogoutUri. Defaults to true */
    backChannelLogoutSessionRequired?: boolean;
    /** Gets or sets the type of the device flow user code. */
    userCodeType?: string | undefined;
    /** Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days. */
    slidingRefreshTokenLifetime?: number;
    /** Gets or sets the device code lifetime. */
    deviceCodeLifetime?: number | undefined;
    /** List of client claims. */
    claims?: ClaimInfo[] | undefined;
    /** List of configured grant types. */
    grantTypes?: string[] | undefined;
    /** List of available client secrets. */
    secrets?: ClientSecretInfo[] | undefined;
    /** CORS origins allowed. */
    allowedCorsOrigins?: string[] | undefined;
    /** Allowed URIs to redirect after logout. */
    postLogoutRedirectUris?: string[] | undefined;
    /** Allowed URIs to redirect after successful login. */
    redirectUris?: string[] | undefined;
    /** The API resources that the client has access to. */
    apiResources?: string[] | undefined;
    /** The identity resources that the client has access to. */
    identityResources?: string[] | undefined;
    /** Translations. */
    translations?: { [key: string]: ClientTranslation; } | undefined;
    /** Determines whether login using a local account is allowed for this client. */
    enableLocalLogin?: boolean;
    /** List of identity providers that are not allowed for this client. */
    identityProviderRestrictions?: string[] | undefined;
}

/** Models an application user when API provides info for a single user. */
export class SingleUserInfo implements ISingleUserInfo {
    /** User's unique identifier. */
    id?: string | undefined;
    /** Indicates whether a user's email is confirmed or not. */
    emailConfirmed?: boolean;
    /** Indicates whether lockout feature is enabled for the user. */
    lockoutEnabled?: boolean;
    /** Indicates whether a user's phone number is confirmed or not. */
    phoneNumberConfirmed?: boolean;
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** The date-time where the user was created in the system. */
    createDate?: Date;
    /** The date-time where the lockout period ends. */
    lockoutEnd?: Date | undefined;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;
    /** Indicates whether the user is forcefully blocked. */
    blocked?: boolean;
    passwordExpirationPolicy?: PasswordExpirationPolicy;
    /** Indicates whether the user is a system administrator. */
    isAdmin?: boolean;
    /** The number of failed login attempts for the user. */
    accessFailedCount?: number;
    /** Gets or sets the date and time, in UTC, when the user last signed in. */
    lastSignInDate?: Date | undefined;
    /** If set, it represents the date when the current password will expire. */
    passwordExpirationDate?: Date | undefined;
    /** The names of the roles that the user belongs to. */
    roles?: string[] | undefined;
    /** User metadata expressed as claims. */
    claims?: ClaimInfo[] | undefined;

    constructor(data?: ISingleUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>undefined;
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.userName = _data["userName"];
            this.blocked = _data["blocked"];
            this.passwordExpirationPolicy = _data["passwordExpirationPolicy"];
            this.isAdmin = _data["isAdmin"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.lastSignInDate = _data["lastSignInDate"] ? new Date(_data["lastSignInDate"].toString()) : <any>undefined;
            this.passwordExpirationDate = _data["passwordExpirationDate"] ? new Date(_data["passwordExpirationDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(ClaimInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SingleUserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SingleUserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["emailConfirmed"] = this.emailConfirmed;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["userName"] = this.userName;
        data["blocked"] = this.blocked;
        data["passwordExpirationPolicy"] = this.passwordExpirationPolicy;
        data["isAdmin"] = this.isAdmin;
        data["accessFailedCount"] = this.accessFailedCount;
        data["lastSignInDate"] = this.lastSignInDate ? this.lastSignInDate.toISOString() : <any>undefined;
        data["passwordExpirationDate"] = this.passwordExpirationDate ? this.passwordExpirationDate.toISOString() : <any>undefined;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        return data;
    }
}

/** Models an application user when API provides info for a single user. */
export interface ISingleUserInfo {
    /** User's unique identifier. */
    id?: string | undefined;
    /** Indicates whether a user's email is confirmed or not. */
    emailConfirmed?: boolean;
    /** Indicates whether lockout feature is enabled for the user. */
    lockoutEnabled?: boolean;
    /** Indicates whether a user's phone number is confirmed or not. */
    phoneNumberConfirmed?: boolean;
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** The date-time where the user was created in the system. */
    createDate?: Date;
    /** The date-time where the lockout period ends. */
    lockoutEnd?: Date | undefined;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;
    /** Indicates whether the user is forcefully blocked. */
    blocked?: boolean;
    passwordExpirationPolicy?: PasswordExpirationPolicy;
    /** Indicates whether the user is a system administrator. */
    isAdmin?: boolean;
    /** The number of failed login attempts for the user. */
    accessFailedCount?: number;
    /** Gets or sets the date and time, in UTC, when the user last signed in. */
    lastSignInDate?: Date | undefined;
    /** If set, it represents the date when the current password will expire. */
    passwordExpirationDate?: Date | undefined;
    /** The names of the roles that the user belongs to. */
    roles?: string[] | undefined;
    /** User metadata expressed as claims. */
    claims?: ClaimInfo[] | undefined;
}

/** Contains summary information about the system. */
export class SummaryInfo implements ISummaryInfo {
    /** Indicates the point in time where the statistics where last updated. */
    lastUpdatedAt?: Date;
    /** The total number of users. */
    totalUsers?: number;
    /** The total number of clients. */
    totalClients?: number;
    /** The total number of roles. */
    totalRoles?: number;
    activity?: UsersActivityInfo;
    stats?: UsersStatisticsInfo;

    constructor(data?: ISummaryInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lastUpdatedAt = _data["lastUpdatedAt"] ? new Date(_data["lastUpdatedAt"].toString()) : <any>undefined;
            this.totalUsers = _data["totalUsers"];
            this.totalClients = _data["totalClients"];
            this.totalRoles = _data["totalRoles"];
            this.activity = _data["activity"] ? UsersActivityInfo.fromJS(_data["activity"]) : <any>undefined;
            this.stats = _data["stats"] ? UsersStatisticsInfo.fromJS(_data["stats"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SummaryInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SummaryInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdatedAt"] = this.lastUpdatedAt ? this.lastUpdatedAt.toISOString() : <any>undefined;
        data["totalUsers"] = this.totalUsers;
        data["totalClients"] = this.totalClients;
        data["totalRoles"] = this.totalRoles;
        data["activity"] = this.activity ? this.activity.toJSON() : <any>undefined;
        data["stats"] = this.stats ? this.stats.toJSON() : <any>undefined;
        return data;
    }
}

/** Contains summary information about the system. */
export interface ISummaryInfo {
    /** Indicates the point in time where the statistics where last updated. */
    lastUpdatedAt?: Date;
    /** The total number of users. */
    totalUsers?: number;
    /** The total number of clients. */
    totalClients?: number;
    /** The total number of roles. */
    totalRoles?: number;
    activity?: UsersActivityInfo;
    stats?: UsersStatisticsInfo;
}

/** Models a statistic value, */
export class SummaryStatistic implements ISummaryStatistic {
    /** The count. */
    count?: number;
    /** The percent. */
    percent?: number;

    constructor(data?: ISummaryStatistic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            this.percent = _data["percent"];
        }
    }

    static fromJS(data: any): SummaryStatistic {
        data = typeof data === 'object' ? data : {};
        let result = new SummaryStatistic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        data["percent"] = this.percent;
        return data;
    }
}

/** Models a statistic value, */
export interface ISummaryStatistic {
    /** The count. */
    count?: number;
    /** The percent. */
    percent?: number;
}

export enum TokenExpiration {
    _0 = 0,
    _1 = 1,
}

export enum TokenUsage {
    _0 = 0,
    _1 = 1,
}

export class UiFeaturesInfo implements IUiFeaturesInfo {
    /** Determines whether dashboard metrics should be visible. */
    metricsEnabled?: boolean;
    /** Determines whether sign in logs should be visible. */
    signInLogsEnabled?: boolean;

    constructor(data?: IUiFeaturesInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.metricsEnabled = _data["metricsEnabled"];
            this.signInLogsEnabled = _data["signInLogsEnabled"];
        }
    }

    static fromJS(data: any): UiFeaturesInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UiFeaturesInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["metricsEnabled"] = this.metricsEnabled;
        data["signInLogsEnabled"] = this.signInLogsEnabled;
        return data;
    }
}

export interface IUiFeaturesInfo {
    /** Determines whether dashboard metrics should be visible. */
    metricsEnabled?: boolean;
    /** Determines whether sign in logs should be visible. */
    signInLogsEnabled?: boolean;
}

/** Models an API resource that will be updated on the server. */
export class UpdateApiResourceRequest implements IUpdateApiResourceRequest {
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
    /** Specifies whether the resource is enabled. */
    enabled?: boolean;

    constructor(data?: IUpdateApiResourceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): UpdateApiResourceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateApiResourceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** Models an API resource that will be updated on the server. */
export interface IUpdateApiResourceRequest {
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
    /** Specifies whether the resource is enabled. */
    enabled?: boolean;
}

/** Models an API scope that will be updated on the server. */
export class UpdateApiScopeRequest implements IUpdateApiScopeRequest {
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
    /** Determines whether this scope is required or not. */
    required?: boolean;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
    /** Translations. */
    translations?: { [key: string]: ApiScopeTranslation; } | undefined;

    constructor(data?: IUpdateApiScopeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            if (_data["translations"]) {
                this.translations = {} as any;
                for (let key in _data["translations"]) {
                    if (_data["translations"].hasOwnProperty(key))
                        (<any>this.translations)![key] = _data["translations"][key] ? ApiScopeTranslation.fromJS(_data["translations"][key]) : new ApiScopeTranslation();
                }
            }
        }
    }

    static fromJS(data: any): UpdateApiScopeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateApiScopeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        if (this.translations) {
            data["translations"] = {};
            for (let key in this.translations) {
                if (this.translations.hasOwnProperty(key))
                    (<any>data["translations"])[key] = this.translations[key] ? this.translations[key].toJSON() : <any>undefined;
            }
        }
        return data;
    }
}

/** Models an API scope that will be updated on the server. */
export interface IUpdateApiScopeRequest {
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
    /** Determines whether this scope is required or not. */
    required?: boolean;
    /** Determines whether this scope should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
    /** Translations. */
    translations?: { [key: string]: ApiScopeTranslation; } | undefined;
}

/** Models an application setting that will be updated on the server. */
export class UpdateAppSettingRequest implements IUpdateAppSettingRequest {
    /** The value of application setting. */
    value!: string;

    constructor(data?: IUpdateAppSettingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): UpdateAppSettingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAppSettingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Models an application setting that will be updated on the server. */
export interface IUpdateAppSettingRequest {
    /** The value of application setting. */
    value: string;
}

/** Models a claim type that will be updated on the server. */
export class UpdateClaimTypeRequest implements IUpdateClaimTypeRequest {
    /** The name used for display purposes. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ClaimValueType;

    constructor(data?: IUpdateClaimTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.required = _data["required"];
            this.userEditable = _data["userEditable"];
            this.rule = _data["rule"];
            this.valueType = _data["valueType"];
        }
    }

    static fromJS(data: any): UpdateClaimTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateClaimTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["required"] = this.required;
        data["userEditable"] = this.userEditable;
        data["rule"] = this.rule;
        data["valueType"] = this.valueType;
        return data;
    }
}

/** Models a claim type that will be updated on the server. */
export interface IUpdateClaimTypeRequest {
    /** The name used for display purposes. */
    displayName?: string | undefined;
    /** A description. */
    description?: string | undefined;
    /** Determines whether this claim is required to create new users. */
    required?: boolean;
    /** Determines whether this claim will be editable by a user if exposed through a public API. */
    userEditable?: boolean;
    /** A regex rule that constraints the values of the claim. */
    rule?: string | undefined;
    valueType?: ClaimValueType;
}

/** Models a client that will be updated on the server. */
export class UpdateClientRequest implements IUpdateClientRequest {
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean;
    /** Translations. */
    translations?: { [key: string]: ClientTranslation; } | undefined;
    /** Lifetime of identity token in seconds. */
    identityTokenLifetime?: number;
    /** Lifetime of access token in seconds */
    accessTokenLifetime?: number;
    /** Maximum lifetime of a refresh token in seconds. */
    absoluteRefreshTokenLifetime?: number;
    /** Lifetime of a user consent in seconds. */
    consentLifetime?: number | undefined;
    /** Gets or sets a value indicating whether to allow offline access. */
    allowOfflineAccess?: boolean;
    /** The maximum duration (in seconds) since the last time the user authenticated. */
    userSsoLifetime?: number | undefined;
    /** Specifies logout URI at client for HTTP front-channel based logout. */
    frontChannelLogoutUri?: string | undefined;
    /** Gets or sets a salt value used in pair-wise subjectId generation for users of this client. */
    pairWiseSubjectSalt?: string | undefined;
    /** Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request. */
    updateAccessTokenClaimsOnRefresh?: boolean;
    /** Specifies logout URI at client for HTTP back-channel based logout. */
    backChannelLogoutUri?: string | undefined;
    /** Specifies is the user's session id should be sent to the BackChannelLogoutUri. */
    backChannelLogoutSessionRequired?: boolean;
    accessTokenType?: AccessTokenType;
    refreshTokenExpiration?: TokenExpiration;
    refreshTokenUsage?: TokenUsage;
    /** Specifies is the user's session id should be sent to the FrontChannelLogoutUri. */
    frontChannelLogoutSessionRequired?: boolean;
    /** Gets or sets a value indicating whether JWT access tokens should include an identifier. */
    includeJwtId?: boolean;
    /** Controls whether access tokens are transmitted via the browser for this client. This can prevent accidental leakage of access tokens when multiple response types are allowed. */
    allowAccessTokensViaBrowser?: boolean;
    /** When requesting both an id token and access token, should the user claims always be added to the id token instead of requring the client to use the userinfo endpoint. */
    alwaysIncludeUserClaimsInIdToken?: boolean;
    /** Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow. */
    alwaysSendClientClaims?: boolean;
    /** Lifetime of authorization code in seconds. */
    authorizationCodeLifetime?: number;
    /** Specifies whether a proof key is required for authorization code based token requests. */
    requirePkce?: boolean;
    /** Specifies whether a proof key can be sent using plain method. */
    allowPlainTextPkce?: boolean;
    /** Gets or sets a value to prefix it on client claim types. */
    clientClaimsPrefix?: string | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean;
    /** Gets or sets the type of the device flow user code. */
    userCodeType?: string | undefined;
    /** Gets or sets the device code lifetime. */
    deviceCodeLifetime?: number;
    /** Specifies if client is enabled. */
    enabled?: boolean;
    /** Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days. */
    slidingRefreshTokenLifetime?: number;
    /** Determines whether login using a local account is allowed for this client. */
    enableLocalLogin?: boolean | undefined;
    /** List of identity providers that are not allowed for this client. */
    identityProviderRestrictions?: string[] | undefined;

    constructor(data?: IUpdateClientRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientName = _data["clientName"];
            this.clientUri = _data["clientUri"];
            this.logoUri = _data["logoUri"];
            this.description = _data["description"];
            this.requireConsent = _data["requireConsent"];
            if (_data["translations"]) {
                this.translations = {} as any;
                for (let key in _data["translations"]) {
                    if (_data["translations"].hasOwnProperty(key))
                        (<any>this.translations)![key] = _data["translations"][key] ? ClientTranslation.fromJS(_data["translations"][key]) : new ClientTranslation();
                }
            }
            this.identityTokenLifetime = _data["identityTokenLifetime"];
            this.accessTokenLifetime = _data["accessTokenLifetime"];
            this.absoluteRefreshTokenLifetime = _data["absoluteRefreshTokenLifetime"];
            this.consentLifetime = _data["consentLifetime"];
            this.allowOfflineAccess = _data["allowOfflineAccess"];
            this.userSsoLifetime = _data["userSsoLifetime"];
            this.frontChannelLogoutUri = _data["frontChannelLogoutUri"];
            this.pairWiseSubjectSalt = _data["pairWiseSubjectSalt"];
            this.updateAccessTokenClaimsOnRefresh = _data["updateAccessTokenClaimsOnRefresh"];
            this.backChannelLogoutUri = _data["backChannelLogoutUri"];
            this.backChannelLogoutSessionRequired = _data["backChannelLogoutSessionRequired"];
            this.accessTokenType = _data["accessTokenType"];
            this.refreshTokenExpiration = _data["refreshTokenExpiration"];
            this.refreshTokenUsage = _data["refreshTokenUsage"];
            this.frontChannelLogoutSessionRequired = _data["frontChannelLogoutSessionRequired"];
            this.includeJwtId = _data["includeJwtId"];
            this.allowAccessTokensViaBrowser = _data["allowAccessTokensViaBrowser"];
            this.alwaysIncludeUserClaimsInIdToken = _data["alwaysIncludeUserClaimsInIdToken"];
            this.alwaysSendClientClaims = _data["alwaysSendClientClaims"];
            this.authorizationCodeLifetime = _data["authorizationCodeLifetime"];
            this.requirePkce = _data["requirePkce"];
            this.allowPlainTextPkce = _data["allowPlainTextPkce"];
            this.clientClaimsPrefix = _data["clientClaimsPrefix"];
            this.allowRememberConsent = _data["allowRememberConsent"];
            this.userCodeType = _data["userCodeType"];
            this.deviceCodeLifetime = _data["deviceCodeLifetime"];
            this.enabled = _data["enabled"];
            this.slidingRefreshTokenLifetime = _data["slidingRefreshTokenLifetime"];
            this.enableLocalLogin = _data["enableLocalLogin"];
            if (Array.isArray(_data["identityProviderRestrictions"])) {
                this.identityProviderRestrictions = [] as any;
                for (let item of _data["identityProviderRestrictions"])
                    this.identityProviderRestrictions!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateClientRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateClientRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientName"] = this.clientName;
        data["clientUri"] = this.clientUri;
        data["logoUri"] = this.logoUri;
        data["description"] = this.description;
        data["requireConsent"] = this.requireConsent;
        if (this.translations) {
            data["translations"] = {};
            for (let key in this.translations) {
                if (this.translations.hasOwnProperty(key))
                    (<any>data["translations"])[key] = this.translations[key] ? this.translations[key].toJSON() : <any>undefined;
            }
        }
        data["identityTokenLifetime"] = this.identityTokenLifetime;
        data["accessTokenLifetime"] = this.accessTokenLifetime;
        data["absoluteRefreshTokenLifetime"] = this.absoluteRefreshTokenLifetime;
        data["consentLifetime"] = this.consentLifetime;
        data["allowOfflineAccess"] = this.allowOfflineAccess;
        data["userSsoLifetime"] = this.userSsoLifetime;
        data["frontChannelLogoutUri"] = this.frontChannelLogoutUri;
        data["pairWiseSubjectSalt"] = this.pairWiseSubjectSalt;
        data["updateAccessTokenClaimsOnRefresh"] = this.updateAccessTokenClaimsOnRefresh;
        data["backChannelLogoutUri"] = this.backChannelLogoutUri;
        data["backChannelLogoutSessionRequired"] = this.backChannelLogoutSessionRequired;
        data["accessTokenType"] = this.accessTokenType;
        data["refreshTokenExpiration"] = this.refreshTokenExpiration;
        data["refreshTokenUsage"] = this.refreshTokenUsage;
        data["frontChannelLogoutSessionRequired"] = this.frontChannelLogoutSessionRequired;
        data["includeJwtId"] = this.includeJwtId;
        data["allowAccessTokensViaBrowser"] = this.allowAccessTokensViaBrowser;
        data["alwaysIncludeUserClaimsInIdToken"] = this.alwaysIncludeUserClaimsInIdToken;
        data["alwaysSendClientClaims"] = this.alwaysSendClientClaims;
        data["authorizationCodeLifetime"] = this.authorizationCodeLifetime;
        data["requirePkce"] = this.requirePkce;
        data["allowPlainTextPkce"] = this.allowPlainTextPkce;
        data["clientClaimsPrefix"] = this.clientClaimsPrefix;
        data["allowRememberConsent"] = this.allowRememberConsent;
        data["userCodeType"] = this.userCodeType;
        data["deviceCodeLifetime"] = this.deviceCodeLifetime;
        data["enabled"] = this.enabled;
        data["slidingRefreshTokenLifetime"] = this.slidingRefreshTokenLifetime;
        data["enableLocalLogin"] = this.enableLocalLogin;
        if (Array.isArray(this.identityProviderRestrictions)) {
            data["identityProviderRestrictions"] = [];
            for (let item of this.identityProviderRestrictions)
                data["identityProviderRestrictions"].push(item);
        }
        return data;
    }
}

/** Models a client that will be updated on the server. */
export interface IUpdateClientRequest {
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean;
    /** Translations. */
    translations?: { [key: string]: ClientTranslation; } | undefined;
    /** Lifetime of identity token in seconds. */
    identityTokenLifetime?: number;
    /** Lifetime of access token in seconds */
    accessTokenLifetime?: number;
    /** Maximum lifetime of a refresh token in seconds. */
    absoluteRefreshTokenLifetime?: number;
    /** Lifetime of a user consent in seconds. */
    consentLifetime?: number | undefined;
    /** Gets or sets a value indicating whether to allow offline access. */
    allowOfflineAccess?: boolean;
    /** The maximum duration (in seconds) since the last time the user authenticated. */
    userSsoLifetime?: number | undefined;
    /** Specifies logout URI at client for HTTP front-channel based logout. */
    frontChannelLogoutUri?: string | undefined;
    /** Gets or sets a salt value used in pair-wise subjectId generation for users of this client. */
    pairWiseSubjectSalt?: string | undefined;
    /** Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request. */
    updateAccessTokenClaimsOnRefresh?: boolean;
    /** Specifies logout URI at client for HTTP back-channel based logout. */
    backChannelLogoutUri?: string | undefined;
    /** Specifies is the user's session id should be sent to the BackChannelLogoutUri. */
    backChannelLogoutSessionRequired?: boolean;
    accessTokenType?: AccessTokenType;
    refreshTokenExpiration?: TokenExpiration;
    refreshTokenUsage?: TokenUsage;
    /** Specifies is the user's session id should be sent to the FrontChannelLogoutUri. */
    frontChannelLogoutSessionRequired?: boolean;
    /** Gets or sets a value indicating whether JWT access tokens should include an identifier. */
    includeJwtId?: boolean;
    /** Controls whether access tokens are transmitted via the browser for this client. This can prevent accidental leakage of access tokens when multiple response types are allowed. */
    allowAccessTokensViaBrowser?: boolean;
    /** When requesting both an id token and access token, should the user claims always be added to the id token instead of requring the client to use the userinfo endpoint. */
    alwaysIncludeUserClaimsInIdToken?: boolean;
    /** Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow. */
    alwaysSendClientClaims?: boolean;
    /** Lifetime of authorization code in seconds. */
    authorizationCodeLifetime?: number;
    /** Specifies whether a proof key is required for authorization code based token requests. */
    requirePkce?: boolean;
    /** Specifies whether a proof key can be sent using plain method. */
    allowPlainTextPkce?: boolean;
    /** Gets or sets a value to prefix it on client claim types. */
    clientClaimsPrefix?: string | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean;
    /** Gets or sets the type of the device flow user code. */
    userCodeType?: string | undefined;
    /** Gets or sets the device code lifetime. */
    deviceCodeLifetime?: number;
    /** Specifies if client is enabled. */
    enabled?: boolean;
    /** Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days. */
    slidingRefreshTokenLifetime?: number;
    /** Determines whether login using a local account is allowed for this client. */
    enableLocalLogin?: boolean | undefined;
    /** List of identity providers that are not allowed for this client. */
    identityProviderRestrictions?: string[] | undefined;
}

/** Defines the model required to update client URLs. */
export class UpdateClientUrls implements IUpdateClientUrls {
    /** Cors origins allowed. */
    allowedCorsOrigins?: string[] | undefined;
    /** Allowed URIs to redirect after logout. */
    postLogoutRedirectUris?: string[] | undefined;
    /** Allowed URIs to redirect after successful login. */
    redirectUris?: string[] | undefined;

    constructor(data?: IUpdateClientUrls) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["allowedCorsOrigins"])) {
                this.allowedCorsOrigins = [] as any;
                for (let item of _data["allowedCorsOrigins"])
                    this.allowedCorsOrigins!.push(item);
            }
            if (Array.isArray(_data["postLogoutRedirectUris"])) {
                this.postLogoutRedirectUris = [] as any;
                for (let item of _data["postLogoutRedirectUris"])
                    this.postLogoutRedirectUris!.push(item);
            }
            if (Array.isArray(_data["redirectUris"])) {
                this.redirectUris = [] as any;
                for (let item of _data["redirectUris"])
                    this.redirectUris!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateClientUrls {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateClientUrls();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allowedCorsOrigins)) {
            data["allowedCorsOrigins"] = [];
            for (let item of this.allowedCorsOrigins)
                data["allowedCorsOrigins"].push(item);
        }
        if (Array.isArray(this.postLogoutRedirectUris)) {
            data["postLogoutRedirectUris"] = [];
            for (let item of this.postLogoutRedirectUris)
                data["postLogoutRedirectUris"].push(item);
        }
        if (Array.isArray(this.redirectUris)) {
            data["redirectUris"] = [];
            for (let item of this.redirectUris)
                data["redirectUris"].push(item);
        }
        return data;
    }
}

/** Defines the model required to update client URLs. */
export interface IUpdateClientUrls {
    /** Cors origins allowed. */
    allowedCorsOrigins?: string[] | undefined;
    /** Allowed URIs to redirect after logout. */
    postLogoutRedirectUris?: string[] | undefined;
    /** Allowed URIs to redirect after successful login. */
    redirectUris?: string[] | undefined;
}

/** Models an identity resource that will be updated on the server. */
export class UpdateIdentityResourceRequest implements IUpdateIdentityResourceRequest {
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
    /** Specifies whether the resource is enabled. */
    enabled?: boolean;
    /** Determines whether this resource should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this resource is required or not. */
    required?: boolean;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;

    constructor(data?: IUpdateIdentityResourceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.emphasize = _data["emphasize"];
            this.required = _data["required"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
        }
    }

    static fromJS(data: any): UpdateIdentityResourceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateIdentityResourceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["emphasize"] = this.emphasize;
        data["required"] = this.required;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        return data;
    }
}

/** Models an identity resource that will be updated on the server. */
export interface IUpdateIdentityResourceRequest {
    /** Display name of the resource. */
    displayName?: string | undefined;
    /** Description of the resource. */
    description?: string | undefined;
    /** Specifies whether the resource is enabled. */
    enabled?: boolean;
    /** Determines whether this resource should be displayed emphasized or not. */
    emphasize?: boolean;
    /** Determines whether this resource is required or not. */
    required?: boolean;
    /** Determines whether this scope should be displayed in the discovery document or not. */
    showInDiscoveryDocument?: boolean;
}

/** Models the request to update the max devices number for the user. */
export class UpdateMaxDevicesCountRequest implements IUpdateMaxDevicesCountRequest {
    /** The number to apply for devices count. */
    count?: number;

    constructor(data?: IUpdateMaxDevicesCountRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): UpdateMaxDevicesCountRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMaxDevicesCountRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        return data;
    }
}

/** Models the request to update the max devices number for the user. */
export interface IUpdateMaxDevicesCountRequest {
    /** The number to apply for devices count. */
    count?: number;
}

/** Models the request to update the password expiration policy for the user. */
export class UpdatePasswordExpirationPolicyRequest implements IUpdatePasswordExpirationPolicyRequest {
    policy!: PasswordExpirationPolicy;

    constructor(data?: IUpdatePasswordExpirationPolicyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.policy = _data["policy"];
        }
    }

    static fromJS(data: any): UpdatePasswordExpirationPolicyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePasswordExpirationPolicyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["policy"] = this.policy;
        return data;
    }
}

/** Models the request to update the password expiration policy for the user. */
export interface IUpdatePasswordExpirationPolicyRequest {
    policy: PasswordExpirationPolicy;
}

/** Models a role that will be updated on the server. */
export class UpdateRoleRequest implements IUpdateRoleRequest {
    /** A description for the role. */
    description?: string | undefined;

    constructor(data?: IUpdateRoleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateRoleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        return data;
    }
}

/** Models a role that will be updated on the server. */
export interface IUpdateRoleRequest {
    /** A description for the role. */
    description?: string | undefined;
}

/** Models a user claim that will be updated on the server. */
export class UpdateUserClaimRequest implements IUpdateUserClaimRequest {
    /** The value of the claim. */
    claimValue?: string | undefined;

    constructor(data?: IUpdateUserClaimRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.claimValue = _data["claimValue"];
        }
    }

    static fromJS(data: any): UpdateUserClaimRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserClaimRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["claimValue"] = this.claimValue;
        return data;
    }
}

/** Models a user claim that will be updated on the server. */
export interface IUpdateUserClaimRequest {
    /** The value of the claim. */
    claimValue?: string | undefined;
}

/** Models the request to update the email for the user. */
export class UpdateUserEmailRequest implements IUpdateUserEmailRequest {
    /** The URL to return to. */
    returnUrl?: string | undefined;
    /** The new user email. */
    email!: string;

    constructor(data?: IUpdateUserEmailRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.returnUrl = _data["returnUrl"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): UpdateUserEmailRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserEmailRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["returnUrl"] = this.returnUrl;
        data["email"] = this.email;
        return data;
    }
}

/** Models the request to update the email for the user. */
export interface IUpdateUserEmailRequest {
    /** The URL to return to. */
    returnUrl?: string | undefined;
    /** The new user email. */
    email: string;
}

/** Models a request for changing the username. */
export class UpdateUserNameRequest implements IUpdateUserNameRequest {
    /** The new username. */
    userName!: string;

    constructor(data?: IUpdateUserNameRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): UpdateUserNameRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserNameRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        return data;
    }
}

/** Models a request for changing the username. */
export interface IUpdateUserNameRequest {
    /** The new username. */
    userName: string;
}

/** Models the payload when user requests a phone number update. */
export class UpdateUserPhoneNumberRequest implements IUpdateUserPhoneNumberRequest {
    /** The phone number. */
    phoneNumber!: string;
    deliveryChannel?: string | undefined;

    constructor(data?: IUpdateUserPhoneNumberRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.phoneNumber = _data["phoneNumber"];
            this.deliveryChannel = _data["deliveryChannel"];
        }
    }

    static fromJS(data: any): UpdateUserPhoneNumberRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserPhoneNumberRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNumber"] = this.phoneNumber;
        data["deliveryChannel"] = this.deliveryChannel;
        return data;
    }
}

/** Models the payload when user requests a phone number update. */
export interface IUpdateUserPhoneNumberRequest {
    /** The phone number. */
    phoneNumber: string;
    deliveryChannel?: string | undefined;
}

/** Models a user that will be updated on the server. */
export class UpdateUserRequest implements IUpdateUserRequest {
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;
    /** Dynamic claims that have been marked as required. */
    claims?: BasicClaimInfo[] | undefined;
    passwordExpirationPolicy?: PasswordExpirationPolicy;
    /** Indicates whether the user is a system administrator. */
    isAdmin?: boolean;
    /** Indicates whether a user's email is confirmed or not. */
    emailConfirmed?: boolean;
    /** Indicates whether a user's phone number is confirmed or not. */
    phoneNumberConfirmed?: boolean;
    /** Flag indicating if we need to bypass email as username policy. */
    bypassEmailAsUserNamePolicy?: boolean;

    constructor(data?: IUpdateUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.userName = _data["userName"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(BasicClaimInfo.fromJS(item));
            }
            this.passwordExpirationPolicy = _data["passwordExpirationPolicy"];
            this.isAdmin = _data["isAdmin"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.bypassEmailAsUserNamePolicy = _data["bypassEmailAsUserNamePolicy"];
        }
    }

    static fromJS(data: any): UpdateUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["userName"] = this.userName;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        data["passwordExpirationPolicy"] = this.passwordExpirationPolicy;
        data["isAdmin"] = this.isAdmin;
        data["emailConfirmed"] = this.emailConfirmed;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["bypassEmailAsUserNamePolicy"] = this.bypassEmailAsUserNamePolicy;
        return data;
    }
}

/** Models a user that will be updated on the server. */
export interface IUpdateUserRequest {
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;
    /** Dynamic claims that have been marked as required. */
    claims?: BasicClaimInfo[] | undefined;
    passwordExpirationPolicy?: PasswordExpirationPolicy;
    /** Indicates whether the user is a system administrator. */
    isAdmin?: boolean;
    /** Indicates whether a user's email is confirmed or not. */
    emailConfirmed?: boolean;
    /** Indicates whether a user's phone number is confirmed or not. */
    phoneNumberConfirmed?: boolean;
    /** Flag indicating if we need to bypass email as username policy. */
    bypassEmailAsUserNamePolicy?: boolean;
}

/** Models a system client that a user has given consent to or currently has IdentityServer side tokens for. */
export class UserClientInfo implements IUserClientInfo {
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;
    /** Creation of grant. */
    createdAt?: Date;
    /** Expiration of grant. */
    expiresAt?: Date | undefined;
    /** Resources/scopes accessible by the application. */
    scopes?: string[] | undefined;

    constructor(data?: IUserClientInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.requireConsent = _data["requireConsent"];
            this.allowRememberConsent = _data["allowRememberConsent"];
            this.logoUri = _data["logoUri"];
            this.clientUri = _data["clientUri"];
            this.nonEditable = _data["nonEditable"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.expiresAt = _data["expiresAt"] ? new Date(_data["expiresAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(item);
            }
        }
    }

    static fromJS(data: any): UserClientInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserClientInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["requireConsent"] = this.requireConsent;
        data["allowRememberConsent"] = this.allowRememberConsent;
        data["logoUri"] = this.logoUri;
        data["clientUri"] = this.clientUri;
        data["nonEditable"] = this.nonEditable;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["expiresAt"] = this.expiresAt ? this.expiresAt.toISOString() : <any>undefined;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        return data;
    }
}

/** Models a system client that a user has given consent to or currently has IdentityServer side tokens for. */
export interface IUserClientInfo {
    /** The unique identifier for this application. */
    clientId?: string | undefined;
    /** Application name that will be seen on consent screens. */
    clientName?: string | undefined;
    /** Application description. */
    description?: string | undefined;
    /** Determines whether this application is enabled or not. */
    enabled?: boolean | undefined;
    /** Specifies whether a consent screen is required. */
    requireConsent?: boolean | undefined;
    /** Specifies whether consent screen is remembered after having been given. */
    allowRememberConsent?: boolean | undefined;
    /** Application logo that will be seen on consent screens. */
    logoUri?: string | undefined;
    /** Application URL that will be seen on consent screens. */
    clientUri?: string | undefined;
    /** Specifies whether the client can be edited or not. */
    nonEditable?: boolean;
    /** Creation of grant. */
    createdAt?: Date;
    /** Expiration of grant. */
    expiresAt?: Date | undefined;
    /** Resources/scopes accessible by the application. */
    scopes?: string[] | undefined;
}

export class UserClientInfoResultSet implements IUserClientInfoResultSet {
    count?: number;
    items?: UserClientInfo[] | undefined;

    constructor(data?: IUserClientInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserClientInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserClientInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new UserClientInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserClientInfoResultSet {
    count?: number;
    items?: UserClientInfo[] | undefined;
}

/** Models the */
export class UserConsentInfo implements IUserConsentInfo {
    /** The client id. */
    clientId?: string | undefined;
    /** Consent creation System.DateTime. */
    createdAt?: Date;
    /** Consent expiration System.DateTime. */
    expiresAt?: Date | undefined;
    /** Consent type. */
    type?: string | undefined;
    /** Associated scopes. */
    scopes?: string[] | undefined;
    /** Associated claims. */
    claims?: BasicClaimInfo[] | undefined;

    constructor(data?: IUserConsentInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.expiresAt = _data["expiresAt"] ? new Date(_data["expiresAt"].toString()) : <any>undefined;
            this.type = _data["type"];
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(item);
            }
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(BasicClaimInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserConsentInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserConsentInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["expiresAt"] = this.expiresAt ? this.expiresAt.toISOString() : <any>undefined;
        data["type"] = this.type;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        return data;
    }
}

/** Models the */
export interface IUserConsentInfo {
    /** The client id. */
    clientId?: string | undefined;
    /** Consent creation System.DateTime. */
    createdAt?: Date;
    /** Consent expiration System.DateTime. */
    expiresAt?: Date | undefined;
    /** Consent type. */
    type?: string | undefined;
    /** Associated scopes. */
    scopes?: string[] | undefined;
    /** Associated claims. */
    claims?: BasicClaimInfo[] | undefined;
}

export class UserConsentInfoResultSet implements IUserConsentInfoResultSet {
    count?: number;
    items?: UserConsentInfo[] | undefined;

    constructor(data?: IUserConsentInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserConsentInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserConsentInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new UserConsentInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserConsentInfoResultSet {
    count?: number;
    items?: UserConsentInfo[] | undefined;
}

/** Models an application user when retrieving a list. */
export class UserInfo implements IUserInfo {
    /** User's unique identifier. */
    id?: string | undefined;
    /** Indicates whether a user's email is confirmed or not. */
    emailConfirmed?: boolean;
    /** Indicates whether lockout feature is enabled for the user. */
    lockoutEnabled?: boolean;
    /** Indicates whether a user's phone number is confirmed or not. */
    phoneNumberConfirmed?: boolean;
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** The date-time where the user was created in the system. */
    createDate?: Date;
    /** The date-time where the lockout period ends. */
    lockoutEnd?: Date | undefined;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;
    /** Indicates whether the user is forcefully blocked. */
    blocked?: boolean;
    passwordExpirationPolicy?: PasswordExpirationPolicy;
    /** Indicates whether the user is a system administrator. */
    isAdmin?: boolean;
    /** The number of failed login attempts for the user. */
    accessFailedCount?: number;
    /** Gets or sets the date and time, in UTC, when the user last signed in. */
    lastSignInDate?: Date | undefined;
    /** If set, it represents the date when the current password will expire. */
    passwordExpirationDate?: Date | undefined;
    /** User's first name. */
    firstName?: string | undefined;
    /** User's last name. */
    lastName?: string | undefined;

    constructor(data?: IUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>undefined;
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.userName = _data["userName"];
            this.blocked = _data["blocked"];
            this.passwordExpirationPolicy = _data["passwordExpirationPolicy"];
            this.isAdmin = _data["isAdmin"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.lastSignInDate = _data["lastSignInDate"] ? new Date(_data["lastSignInDate"].toString()) : <any>undefined;
            this.passwordExpirationDate = _data["passwordExpirationDate"] ? new Date(_data["passwordExpirationDate"].toString()) : <any>undefined;
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): UserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["emailConfirmed"] = this.emailConfirmed;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["userName"] = this.userName;
        data["blocked"] = this.blocked;
        data["passwordExpirationPolicy"] = this.passwordExpirationPolicy;
        data["isAdmin"] = this.isAdmin;
        data["accessFailedCount"] = this.accessFailedCount;
        data["lastSignInDate"] = this.lastSignInDate ? this.lastSignInDate.toISOString() : <any>undefined;
        data["passwordExpirationDate"] = this.passwordExpirationDate ? this.passwordExpirationDate.toISOString() : <any>undefined;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

/** Models an application user when retrieving a list. */
export interface IUserInfo {
    /** User's unique identifier. */
    id?: string | undefined;
    /** Indicates whether a user's email is confirmed or not. */
    emailConfirmed?: boolean;
    /** Indicates whether lockout feature is enabled for the user. */
    lockoutEnabled?: boolean;
    /** Indicates whether a user's phone number is confirmed or not. */
    phoneNumberConfirmed?: boolean;
    /** Indicates whether two-factor authentication is enabled for the user. */
    twoFactorEnabled?: boolean;
    /** The date-time where the user was created in the system. */
    createDate?: Date;
    /** The date-time where the lockout period ends. */
    lockoutEnd?: Date | undefined;
    /** User's email address. */
    email?: string | undefined;
    /** User's phone number. */
    phoneNumber?: string | undefined;
    /** The username. */
    userName?: string | undefined;
    /** Indicates whether the user is forcefully blocked. */
    blocked?: boolean;
    passwordExpirationPolicy?: PasswordExpirationPolicy;
    /** Indicates whether the user is a system administrator. */
    isAdmin?: boolean;
    /** The number of failed login attempts for the user. */
    accessFailedCount?: number;
    /** Gets or sets the date and time, in UTC, when the user last signed in. */
    lastSignInDate?: Date | undefined;
    /** If set, it represents the date when the current password will expire. */
    passwordExpirationDate?: Date | undefined;
    /** User's first name. */
    firstName?: string | undefined;
    /** User's last name. */
    lastName?: string | undefined;
}

export class UserInfoResultSet implements IUserInfoResultSet {
    count?: number;
    items?: UserInfo[] | undefined;

    constructor(data?: IUserInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserInfoResultSet {
    count?: number;
    items?: UserInfo[] | undefined;
}

/** Models an user login provider. */
export class UserLoginProviderInfo implements IUserLoginProviderInfo {
    /** Provider name. */
    name?: string | undefined;
    /** Provider key. */
    key?: string | undefined;
    /** Provider display name. */
    displayName?: string | undefined;

    constructor(data?: IUserLoginProviderInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.key = _data["key"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): UserLoginProviderInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginProviderInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["key"] = this.key;
        data["displayName"] = this.displayName;
        return data;
    }
}

/** Models an user login provider. */
export interface IUserLoginProviderInfo {
    /** Provider name. */
    name?: string | undefined;
    /** Provider key. */
    key?: string | undefined;
    /** Provider display name. */
    displayName?: string | undefined;
}

export class UserLoginProviderInfoResultSet implements IUserLoginProviderInfoResultSet {
    count?: number;
    items?: UserLoginProviderInfo[] | undefined;

    constructor(data?: IUserLoginProviderInfoResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserLoginProviderInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserLoginProviderInfoResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginProviderInfoResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserLoginProviderInfoResultSet {
    count?: number;
    items?: UserLoginProviderInfo[] | undefined;
}

/** Models percentage of user activity. */
export class UsersActivityInfo implements IUsersActivityInfo {
    day?: SummaryStatistic;
    week?: SummaryStatistic;
    month?: SummaryStatistic;

    constructor(data?: IUsersActivityInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.day = _data["day"] ? SummaryStatistic.fromJS(_data["day"]) : <any>undefined;
            this.week = _data["week"] ? SummaryStatistic.fromJS(_data["week"]) : <any>undefined;
            this.month = _data["month"] ? SummaryStatistic.fromJS(_data["month"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UsersActivityInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UsersActivityInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["day"] = this.day ? this.day.toJSON() : <any>undefined;
        data["week"] = this.week ? this.week.toJSON() : <any>undefined;
        data["month"] = this.month ? this.month.toJSON() : <any>undefined;
        return data;
    }
}

/** Models percentage of user activity. */
export interface IUsersActivityInfo {
    day?: SummaryStatistic;
    week?: SummaryStatistic;
    month?: SummaryStatistic;
}

/** Models various user statistics. */
export class UsersStatisticsInfo implements IUsersStatisticsInfo {
    emailsVerified?: SummaryStatistic;
    phoneNumbersVerified?: SummaryStatistic;

    constructor(data?: IUsersStatisticsInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailsVerified = _data["emailsVerified"] ? SummaryStatistic.fromJS(_data["emailsVerified"]) : <any>undefined;
            this.phoneNumbersVerified = _data["phoneNumbersVerified"] ? SummaryStatistic.fromJS(_data["phoneNumbersVerified"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UsersStatisticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UsersStatisticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailsVerified"] = this.emailsVerified ? this.emailsVerified.toJSON() : <any>undefined;
        data["phoneNumbersVerified"] = this.phoneNumbersVerified ? this.phoneNumbersVerified.toJSON() : <any>undefined;
        return data;
    }
}

/** Models various user statistics. */
export interface IUsersStatisticsInfo {
    emailsVerified?: SummaryStatistic;
    phoneNumbersVerified?: SummaryStatistic;
}

/** Class that models the request for validating a user's password. */
export class ValidatePasswordRequest implements IValidatePasswordRequest {
    /** A token representing the user id. */
    token?: string | undefined;
    /** The password. */
    password?: string | undefined;
    /** The username. */
    userName?: string | undefined;

    constructor(data?: IValidatePasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.password = _data["password"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): ValidatePasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ValidatePasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["password"] = this.password;
        data["userName"] = this.userName;
        return data;
    }
}

/** Class that models the request for validating a user's password. */
export interface IValidatePasswordRequest {
    /** A token representing the user id. */
    token?: string | undefined;
    /** The password. */
    password?: string | undefined;
    /** The username. */
    userName?: string | undefined;
}

/** Class that models the request for validating a user's username. */
export class ValidateUserNameRequest implements IValidateUserNameRequest {
    /** The username. */
    userName!: string;

    constructor(data?: IValidateUserNameRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): ValidateUserNameRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateUserNameRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        return data;
    }
}

/** Class that models the request for validating a user's username. */
export interface IValidateUserNameRequest {
    /** The username. */
    userName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}